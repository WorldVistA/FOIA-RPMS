<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Red Hat Enterprise Linux for x86-64) 2014.1.3 (Build 775)" ts="2018-09-28 14:46:46">
<Class name="BSTS.SOAP.WebFunctions">
<Description>
BSTS.SOAP.WebFunctions - Contains all method calls to DTS</Description>
<Super>%Persistent</Super>
<TimeChanged>64331,52543.232186</TimeChanged>
<TimeCreated>62769,35102.577656</TimeCreated>

<Method name="LogHistory">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//BSTS*1.0*1;Return search counts
	
	// Data needed passed by BSTSWS array required for call
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))
	
	Set tESiteID=$Get(pParams("ESITE"))
	Set tENameSp=$Get(pParams("ENSPACE"))
	Set tProd=+$Get(pParams("EPROD"))
	Set tRNam=$Get(pParams("RNAME"))
	Set tFrDt=$Get(pParams("FRDT"))
	Set tToDt=$Get(pParams("TODT"))
	
	//Reset scratch global
	Kill ^TMP("BSTSCMCL",$job)
	
	//Set up location
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tStatus=0
	Set pResult=1
	   
	//Put together the definition
	Set SQLSearch="DECLARE @RC int "
	Set SQLSearch=SQLSearch_"EXECUTE @RC = [dbo].[Log_not_search_by_site] "
    Set SQLSearch=SQLSearch_tESiteID_","
  	Set SQLSearch=SQLSearch_"N'"_tRNam_"',"
	Set SQLSearch=SQLSearch_tProd_","

  	Set SQLSearch=SQLSearch_"'"_tFrDt_"',"
  	Set SQLSearch=SQLSearch_"'"_tToDt_"'"
	Set SQLSearch=SQLSearch_" SELECT 'Return Value' = @RC "
	
	If $Get(tDebug) {
		Write !!,"SQL Call: ",SQLSearch,!
	}
	
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.executeSQL(SQLSearch)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			Do $System.OBJ.Dump(tSC)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","executeSQL","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","executeSQL","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","executeSQL","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","executeSQL","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","executeSQL","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","executeSQL","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}
	Set tCount=tSC.Count()
	Set tCounter=0
	For tKey=1:1:tCount {
		
		Set tResult=##class(BSTS.ns2.stringArray).%New()
		Set tResult=tSC.GetAt(tKey)
		Set tGID=$tr(tResult.item.GetAt(1),$c(0))
		Set tPort=$tr(tResult.item.GetAt(2),$c(0))
		Set tSiteID=$tr(tResult.item.GetAt(3),$c(0))
		Set tSiteNM=$tr(tResult.item.GetAt(4),$c(0))
		Set tRName=$tr(tResult.item.GetAt(5),$c(0))
		Set tTProd=$tr(tResult.item.GetAt(6),$c(0))
		Set tDName=$tr(tResult.item.GetAt(7),$c(0))
		Set tEDtTm=$tr(tResult.item.GetAt(8),$c(0))
		Set tEType=$tr(tResult.item.GetAt(9),$c(0))
		Set tEName=$tr(tResult.item.GetAt(10),$c(0))
		Set tEval=$tr(tResult.item.GetAt(11),$c(0))
		
		Set tCounter=tCounter+1,^TMP("BSTSCMCL",$job,tCounter)=tGID_"^"_tDName_"^"_tEDtTm_"^"_tEType_"^"_tEName_"^"_tEval

		If $Get(tDebug) {
			W !!,"#: ",tGID
			W !,"Port: ",tPort
			W !,"Namespace: ",tDName
			W !,"SiteID: ",tSiteID
			W !,"EType: ",tEType
			W !,"EName: ",tEName
			W !,"EValue: ",tEval
		}
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
		
	//End Here - instead of parsing
	Quit 1_"^^"_..GetElapsedTime(tStartTime,$now())
]]></Implementation>
</Method>

<Method name="SearchCounts">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//BSTS*1.0*1;Return search counts
	
	// Data needed passed by BSTSWS array required for call
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))
	
	Set tESiteID=$Get(pParams("ESITE"))
	Set tENameSp=$Get(pParams("ENSPACE"))
	Set tProd=+$Get(pParams("EPROD"))
	Set tRNam=$Get(pParams("RNAME"))
	Set tFrDt=$Get(pParams("FRDT"))
	Set tToDt=$Get(pParams("TODT"))
	
	//Reset scratch global
	Kill ^TMP("BSTSCMCL",$job)
	
	//Set up location
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tStatus=0
	Set pResult=1
	   
	//Put together the definition
	Set SQLSearch="DECLARE @RC int "
	Set SQLSearch=SQLSearch_"EXECUTE @RC = [dbo].[Log_search_by_site] "
    Set SQLSearch=SQLSearch_tESiteID_","
  	Set SQLSearch=SQLSearch_"N'"_tRNam_"',"
	Set SQLSearch=SQLSearch_tENameSp_","
	Set SQLSearch=SQLSearch_tProd_","

  	Set SQLSearch=SQLSearch_"'"_tFrDt_"',"
  	Set SQLSearch=SQLSearch_"'"_tToDt_"'"
	Set SQLSearch=SQLSearch_" SELECT 'Return Value' = @RC "
	
	If $Get(tDebug) {
		Write !!,"SQL Call: ",SQLSearch,!
	}
	
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.executeSQL(SQLSearch)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			Do $System.OBJ.Dump(tSC)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","executeSQL","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","executeSQL","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","executeSQL","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","executeSQL","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","executeSQL","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","executeSQL","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}
	Set tCount=tSC.Count()
	Set tCounter=0
	For tKey=1:1:tCount {
		
		Set tResult=##class(BSTS.ns2.stringArray).%New()
		Set tResult=tSC.GetAt(tKey)
		Set tSearch=tResult.item.GetAt(1)
		Set tSCount=tResult.item.GetAt(2)
		Set tCounter=tCounter+1,^TMP("BSTSCMCL",$job,tCounter)=tSearch_"^"_tSCount

		If $Get(tDebug) {
			W !!,"#: ",tKey
			W !,"Search String: ",tSearch
			W !,"Count: ",tSCount
		}
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
		
	//End Here - instead of parsing
	Quit 1_"^^"_..GetElapsedTime(tStartTime,$now())
]]></Implementation>
</Method>

<Method name="LogEntry">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//BSTS*1.0*1;Log an entry to DTS
	
	// Data needed passed by BSTSWS array required for call
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))
	
	Set tESite=$Get(pParams("ESITE"))
	Set tESiteName=$P(tESite,"|")
	Set tESiteID=$P(tESite,"|",2)
	Set tENameSp=$Get(pParams("ENSPACE"))
	Set tEDtTm=$Get(pParams("EDTTM"))
	Set tEType=$Get(pParams("ETYPE"))
	Set tEName=$Get(pParams("ENAME"))
	Set tEValue=$Get(pParams("EVALUE"))
	Set tProd=+$Get(pParams("EPROD"))
	Set tRNam=$Get(pParams("RNAME"))
	
	//Reset scratch global
	Kill ^TMP("BSTSCMCL",$job)
	
	//Set up location
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tStatus=0
	Set pResult=1
	
	If tEType="SRCH" {
		Set SearchConvert=""
		For piece=1:1:$L(tEValue,"'") {
			Set string=$Piece(tEValue,"'",piece)
			Set SearchConvert=SearchConvert_$Select(piece>1:"''",1:"")_string
		}
		Set tEValue=SearchConvert	
	}
    
	//Put together the definition
	Set SQLSearch="DECLARE @RC int "
	Set SQLSearch=SQLSearch_"EXECUTE @RC = [dbo].[Log_BSTS_Event] "
	Set SQLSearch=SQLSearch_$Get(pParams("PORT"))_","
	Set SQLSearch=SQLSearch_tESiteID_","
	Set SQLSearch=SQLSearch_"N'"_tESiteName_"',"
	Set SQLSearch=SQLSearch_"N'"_tRNam_"',"
	Set SQLSearch=SQLSearch_tProd_","
	Set SQLSearch=SQLSearch_tENameSp_","
	Set SQLSearch=SQLSearch_"'"_tEDtTm_"',"
	Set SQLSearch=SQLSearch_"N'"_tEType_"',"
	Set SQLSearch=SQLSearch_"N'"_tEName_"',"
	Set SQLSearch=SQLSearch_"N'"_tEValue_"'"
	Set SQLSearch=SQLSearch_" SELECT 'Return Value' = @RC "
	
	If $Get(tDebug) {
		Write !!,"SQL Call: ",SQLSearch,!
	}
	
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.executeSQL(SQLSearch)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			Do $System.OBJ.Dump(tSC)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","executeSQL","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","executeSQL","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","executeSQL","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","executeSQL","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","executeSQL","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","executeSQL","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}
	Set tCount=tSC.Count()
	
	Set tCounter=0
	Set tSuccess=0
	For tKey=1:1:tCount {
		
		Set tResult=##class(BSTS.ns2.stringArray).%New()
		Set tResult=tSC.GetAt(tKey)
		Set tSuccess=tResult.item.GetAt(1)

		If $Get(tDebug) {
			W !!,"#: ",tKey
			W !,"Log success: ",tSuccess
		}
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0)!(tSuccess=0) Quit tStatus
		
	//End Here - instead of parsing
	Quit tSuccess_"^^"_..GetElapsedTime(tStartTime,$now())
]]></Implementation>
</Method>

<Method name="getAllRxNormSubsetConcepts">
<Description>
Updated for BSTS*1.0*8;New method to perform RxNorm subset retrieval</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//BSTS*1.0*8;Get list of all concepts that are in subsets besides RXNO SRCH Drug Ingredients All
	
	// Data needed passed by BSTSWS array required for call
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=600   //Override default
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=1552
	Set tRevIn=$Get(pParams("REVIN"))
	Set tSearchPattern=$Get(pParams("SEARCH"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tSType=$Get(pParams("STYPE"))
	Set tSubset=$Get(pParams("SUBSET"))
	Set tExactMatch=$Get(pParams("EXACTMATCH"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))
	
	//Reset scratch global
	Kill ^TMP("BSTSCMCL",$job)
	
	//Set up location
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tStatus=0
	Set pResult=1	
    
	//Put together the definition	
	Set SQLSearch="DECLARE @return_value int "
	Set SQLSearch=SQLSearch_"EXEC    @return_value = [dbo].[dts_all_concepts_with_property_not_in_value_option]"
    Set SQLSearch=SQLSearch_" @Property_Name = N'IHS Subsets', @Property_Value = N'RXNO SRCH Drug Ingredients All',"
    Set SQLSearch=SQLSearch_" @ReturnNotInValue = N'T', @Namespace = N'"_tNamespaceID_"', @Status = N'A', @Revision_In = N'"
	Set SQLSearch=SQLSearch_tRevIn_"' SELECT 'Return Value' = @return_value"	
	
	If $Get(tDebug) {
		Write !!,"SQL Call: ",SQLSearch,!
	}
		
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.executeSQL(SQLSearch)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","executeSQL","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","executeSQL","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","executeSQL","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","executeSQL","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","executeSQL","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","executeSQL","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
	
	//Display results returned
	If $Get(tDebug) {
		Write !,tSearchPattern," results returned: ",tSC.Count()
	}

	// Web call completed. Parse response...
	Set tCount=tSC.Count()
	
	Set tCounter=0
	For tKey=1:1:tCount {
		
		Set tResult=##class(BSTS.ns2.stringArray).%New()
		Set tResult=tSC.GetAt(tKey)
		Set ItemList=tResult.item.GetAt(1)

		If $Get(tDebug) {
			W !,"Items#: ",ItemList
		}
		
		//Save entries
		For Item=1:1:$L(ItemList,",") {
			Set DTSId=$P(ItemList,",",Item)
			If DTSId]"" {
				Set tCounter=tCounter+1
				Set ^TMP("BSTSCMCL",$job,tCounter)=DTSId
				Set ^TMP("BSTSCMCL",$job,"DTS",DTSId)=tCounter
			}	
		}
	
	}
	
	//End Here - instead of parsing
	Quit 1_"^^"_..GetElapsedTime(tStartTime,$now())
]]></Implementation>
</Method>

<Method name="getAllSubsetConcepts">
<Description>
Updated for BSTS*1.0*7;Modified 02/25/2016 by GDHS</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//BSTS*1.0*7;Get list of all concepts that are in subsets besides IHS PROBLEM ALL SNOMED
	
	// Data needed passed by BSTSWS array required for call
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=600   //Override default
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=36
	Set tRevIn=$Get(pParams("REVIN"))
	Set tSearchPattern=$Get(pParams("SEARCH"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tSType=$Get(pParams("STYPE"))
	Set tSubset=$Get(pParams("SUBSET"))
	Set tExactMatch=$Get(pParams("EXACTMATCH"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))
	
	//Reset scratch global
	Kill ^TMP("BSTSCMCL",$job)
	
	//Set up location
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tStatus=0
	Set pResult=1	
    
	//Put together the definition	
	Set SQLSearch="DECLARE @return_value int "
	Set SQLSearch=SQLSearch_"EXEC    @return_value = [dbo].[dts_all_concepts_with_property_not_in_value_option]"
    Set SQLSearch=SQLSearch_" @Property_Name = N'IHS Subsets', @Property_Value = N'IHS PROBLEM ALL SNOMED',"
    Set SQLSearch=SQLSearch_" @ReturnNotInValue = N'T', @Namespace = N'36', @Status = N'A', @Revision_In = N'"
	Set SQLSearch=SQLSearch_tRevIn_"' SELECT 'Return Value' = @return_value"	
	
	If $Get(tDebug) {
		Write !!,"SQL Call: ",SQLSearch,!
	}
		
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.executeSQL(SQLSearch)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","executeSQL","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","executeSQL","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","executeSQL","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","executeSQL","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","executeSQL","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","executeSQL","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
	
	//Display results returned
	If $Get(tDebug) {
		Write !,tSearchPattern," results returned: ",tSC.Count()
	}

	// Web call completed. Parse response...
	Set tCount=tSC.Count()
	
	Set tCounter=0
	For tKey=1:1:tCount {
		
		Set tResult=##class(BSTS.ns2.stringArray).%New()
		Set tResult=tSC.GetAt(tKey)
		Set ItemList=tResult.item.GetAt(1)

		If $Get(tDebug) {
			W !,"Items#: ",ItemList
		}
		
		//Save entries
		For Item=1:1:$L(ItemList,",") {
			Set DTSId=$P(ItemList,",",Item)
			If DTSId]"" {
				Set tCounter=tCounter+1
				Set ^TMP("BSTSCMCL",$job,tCounter)=DTSId
				Set ^TMP("BSTSCMCL",$job,"DTS",DTSId)=tCounter
			}	
		}
	
	}
	
	//End Here - instead of parsing
	Quit 1_"^^"_..GetElapsedTime(tStartTime,$now())
]]></Implementation>
</Method>

<Method name="getEquivalencyConcepts">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//BSTS*1.0*7;Get list of equivalency concepts
	
	// Data needed passed by BSTSWS array required for call
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=600   //Override default
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=32780
	Set tRevIn=$Get(pParams("REVIN"))
	Set tSearchPattern=$Get(pParams("SEARCH"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tSType=$Get(pParams("STYPE"))
	Set tSubset=$Get(pParams("SUBSET"))
	Set tExactMatch=$Get(pParams("EXACTMATCH"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))
	
	//Reset scratch global
	Kill ^TMP("BSTSCMCL",$job)
	
	//Set up location
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tStatus=0
	Set pResult=1	
    
	//Put together the definition	
	Set SQLSearch="DECLARE @return_value int"
	Set SQLSearch=SQLSearch_" EXEC    @return_value = [dbo].[dts_all_concepts_with_associations_in_list]" 
	Set SQLSearch=SQLSearch_" @Association_Name = N'RightVariant,LeftVariant,RightAndLeftVariant'," 
	Set SQLSearch=SQLSearch_" @Namespace = N'36', @Status = N'A', @Revision_In = N'"
	Set SQLSearch=SQLSearch_tRevIn_"' SELECT 'Return Value' = @return_value"	
	
	If $Get(tDebug) {
		Write !!,"SQL Call: ",SQLSearch,!
	}
		
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.executeSQL(SQLSearch)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","executeSQL","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","executeSQL","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","executeSQL","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","executeSQL","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","executeSQL","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","executeSQL","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
	
	//Display results returned
	If $Get(tDebug) {
		Write !,tSearchPattern," results returned: ",tSC.Count()
	}

	// Web call completed. Parse response...
	Set tCount=tSC.Count()
	
	Set tCounter=0
	For tKey=1:1:tCount {
		
		Set tResult=##class(BSTS.ns2.stringArray).%New()
		Set tResult=tSC.GetAt(tKey)
		Set DTSId=tResult.item.GetAt(1)

		If $Get(tDebug) {
			W !,"#: ",tKey
			W ?10,"DTSId: ",DTSId
		}
		
		//Save entry
		If DTSId>0 {
			Set tCounter=tCounter+1
			Set ^TMP("BSTSCMCL",$job,tCounter)=DTSId
			Set ^TMP("BSTSCMCL",$job,"DTS",DTSId)=tCounter
		}
	
	}
	
	//End Here - instead of parsing
	Quit 1_"^^"_..GetElapsedTime(tStartTime,$now())
]]></Implementation>
</Method>

<Method name="getICD10AutoCodePreds">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//BSTS*1.0*6;Added method to retrieve conditional maps
	
	// Data needed passed by BSTSWS array required for call
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=600   //Override default
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=32779
	Set tRevIn=$Get(pParams("REVIN"))
	Set tSearchPattern=$Get(pParams("SEARCH"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tSType=$Get(pParams("STYPE"))
	Set tSubset=$Get(pParams("SUBSET"))
	Set tExactMatch=$Get(pParams("EXACTMATCH"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))
	
	//Reset scratch global
	Kill ^TMP("BSTSCMCL",$job)
	
	//Set up location
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tStatus=0
	Set pResult=1	
    
	//Put together the definition
    
    Set SQLSearch="DECLARE @return_value int"
	Set SQLSearch=SQLSearch_" EXEC @return_value = [dbo].[dts_all_concepts_with_assocations]"
	Set SQLSearch=SQLSearch_" @Association_Name = N'SCTUS-ICD10-CM Autocodeable with Group-Prio-Predicate',"
	Set SQLSearch=SQLSearch_" @Namespace = N'36', @Status = N'A', @Revision_In = N'"
	Set SQLSearch=SQLSearch_tRevIn_"' SELECT 'Return Value' = @return_value"
    
	If $Get(tDebug) {
		Write !!,"SQL Call: ",SQLSearch,!
	}
		
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.executeSQL(SQLSearch)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","executeSQL","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","executeSQL","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","executeSQL","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","executeSQL","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","executeSQL","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","executeSQL","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
	
	//Display results returned
	If $Get(tDebug) {
		Write !,tSearchPattern," results returned: ",tSC.Count()
	}

	// Web call completed. Parse response...
	Set tCount=tSC.Count()
	
	Set tCounter=0
	For tKey=1:1:tCount {
		
		Set tResult=##class(BSTS.ns2.stringArray).%New()
		Set tResult=tSC.GetAt(tKey)
		Set DTSId=tResult.item.GetAt(1)

		If $Get(tDebug) {
			W !,"#: ",tKey
			W ?10,"DTSId: ",DTSId
		}
		
		//Save entry
		If DTSId>0 {
			Set tCounter=tCounter+1
			Set ^TMP("BSTSCMCL",$job,tCounter)=DTSId
			Set ^TMP("BSTSCMCL",$job,"DTS",DTSId)=tCounter
		}
	
	}
	
	//End Here - instead of parsing
	Quit 1_"^^"_..GetElapsedTime(tStartTime,$now())
]]></Implementation>
</Method>

<Method name="getICD10AutoCodes">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// Data needed passed by BSTSWS array required for call
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=600   //Override default
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=32777
	Set tRevIn=$Get(pParams("REVIN"))
	Set tSearchPattern=$Get(pParams("SEARCH"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tSType=$Get(pParams("STYPE"))
	Set tSubset=$Get(pParams("SUBSET"))
	Set tExactMatch=$Get(pParams("EXACTMATCH"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))
	
	//Reset scratch global
	Kill ^TMP("BSTSCMCL",$job)
	
	//Set up location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tStatus=0
	Set pResult=1	
    
	//Put together the definition
    
    Set SQLSearch="DECLARE @return_value int"
	Set SQLSearch=SQLSearch_" EXEC @return_value = [dbo].[dts_all_concepts_with_assocations]"
	Set SQLSearch=SQLSearch_" @Association_Name = N'SCTUS-ICD10CM Autocodeable',"
	Set SQLSearch=SQLSearch_" @Namespace = N'36', @Status = N'A', @Revision_In = N'"
	Set SQLSearch=SQLSearch_tRevIn_"' SELECT 'Return Value' = @return_value"
    
	If $Get(tDebug) {
		Write !!,"SQL Call: ",SQLSearch,!
	}
		
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.executeSQL(SQLSearch)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","executeSQL","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","executeSQL","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","executeSQL","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","executeSQL","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","executeSQL","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","executeSQL","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
	
	//Display results returned
	If $Get(tDebug) {
		Write !,tSearchPattern," results returned: ",tSC.Count()
	}

	// Web call completed. Parse response...
	Set tCount=tSC.Count()
	
	Set tCounter=0
	For tKey=1:1:tCount {
		
		Set tResult=##class(BSTS.ns2.stringArray).%New()
		Set tResult=tSC.GetAt(tKey)
		Set DTSId=tResult.item.GetAt(1)

		If $Get(tDebug) {
			W !,"#: ",tKey
			W ?10,"DTSId: ",DTSId
		}
		
		//Save entry
		If DTSId>0 {
			Set tCounter=tCounter+1
			Set ^TMP("BSTSCMCL",$job,tCounter)=DTSId
			Set ^TMP("BSTSCMCL",$job,"DTS",DTSId)=tCounter
		}
	
	}
	
	//End Here - instead of parsing
	Quit 1_"^^"_..GetElapsedTime(tStartTime,$now())
]]></Implementation>
</Method>

<Method name="getICD9AutoCodes">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// Data needed passed by BSTSWS array required for call
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=600   //Override default
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=32778
	Set tRevIn=$Get(pParams("REVIN"))
	Set tSearchPattern=$Get(pParams("SEARCH"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tSType=$Get(pParams("STYPE"))
	Set tSubset=$Get(pParams("SUBSET"))
	Set tExactMatch=$Get(pParams("EXACTMATCH"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))
	
	//Reset scratch global
	Kill ^TMP("BSTSCMCL",$job)
	
	//Set up location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tStatus=0
	Set pResult=1	
    
	//Put together the definition
    
    Set SQLSearch="DECLARE @return_value int"
	Set SQLSearch=SQLSearch_" EXEC @return_value = [dbo].[dts_all_concepts_with_assocations]"
	Set SQLSearch=SQLSearch_" @Association_Name = N'SCTUS-ICD9CM Autocodeable',"
	Set SQLSearch=SQLSearch_" @Namespace = N'36', @Status = N'A', @Revision_In = N'"
	Set SQLSearch=SQLSearch_tRevIn_"' SELECT 'Return Value' = @return_value"
    
	If $Get(tDebug) {
		Write !!,"SQL Call: ",SQLSearch,!
	}
		
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.executeSQL(SQLSearch)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","executeSQL","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","executeSQL","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","executeSQL","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","executeSQL","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","executeSQL","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","executeSQL","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
	
	//Display results returned
	If $Get(tDebug) {
		Write !,tSearchPattern," results returned: ",tSC.Count()
	}

	// Web call completed. Parse response...
	Set tCount=tSC.Count()
	
	Set tCounter=0
	For tKey=1:1:tCount {
		
		Set tResult=##class(BSTS.ns2.stringArray).%New()
		Set tResult=tSC.GetAt(tKey)
		Set DTSId=tResult.item.GetAt(1)

		If $Get(tDebug) {
			W !,"#: ",tKey
			W ?10,"DTSId: ",DTSId
		}
		
		//Save entry
		If DTSId>0 {
			Set tCounter=tCounter+1
			Set ^TMP("BSTSCMCL",$job,tCounter)=DTSId
		}
	
	}
	
	//End Here - instead of parsing
	Quit 1_"^^"_..GetElapsedTime(tStartTime,$now())
]]></Implementation>
</Method>

<Method name="getCustomCodeset">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	// Data needed passed by BSTSWS array required for call
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=600   //Override default
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=$Get(pParams("NAMESPACEID"))
	Set tRevIn=$Get(pParams("REVIN"))
	Set tSearchPattern=$Get(pParams("SEARCH"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tSType=$Get(pParams("STYPE"))
	Set tSubset=$Get(pParams("SUBSET"))
	Set tExactMatch=$Get(pParams("EXACTMATCH"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))
	
	//Reset scratch global
	Kill ^TMP("BSTSCMCL",$job)
	
	//Handle maximum records
	Set tMaxResults=$Get(pParams("MAXRECS")) If tMaxResults="" Set tMaxResults=25

	//Set up location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"	
	
	Set tStatus=0
	Set pResult=1	
    
	//Put together the definition
	Set SQLSearch="DECLARE @return_value int"
	Set SQLSearch=SQLSearch_" EXEC @return_value = [dbo].[dts_searchconcepts_cond_all]"
    Set SQLSearch=SQLSearch_" @Namespace = N'"_tNamespaceID_"', @Status = N'A', @Revision_In = N'"
    Set SQLSearch=SQLSearch_tRevIn_"' SELECT  'Return Value' = @return_value"
    
	If $Get(tDebug) {
		Write !!,"SQL Call: ",SQLSearch,!
	}
		
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.executeSQL(SQLSearch)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","executeSQL","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","executeSQL","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","executeSQL","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","executeSQL","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","executeSQL","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","executeSQL","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
	
	//Display results returned
	If $Get(tDebug) {
		Write !,tSearchPattern," results returned: ",tSC.Count()
	}

	// Web call completed. Parse response...
	Set tCount=tSC.Count()
	
	Set tCounter=0
	For tKey=1:1:tCount {
		
		Set tResult=##class(BSTS.ns2.stringArray).%New()
		Set tResult=tSC.GetAt(tKey)
		Set DTSId=tResult.item.GetAt(1)
		Set ConcID=tResult.item.GetAt(2)

		If $Get(tDebug) {
			W !!,"#: ",tKey
			W !,"DTSId: ",DTSId
			W !,"Concept: ",ConcID
		}
		
		//Save entry
		If DTSId>0 {
			Set tCounter=tCounter+1
			Set ^TMP("BSTSCMCL",$job,tCounter)=DTSId_"^"_tResult.item.GetAt(2)
		}
	
	}

	//End Here - instead of parsing
	Quit 1_"^^"_..GetElapsedTime(tStartTime,$now())
]]></Implementation>
</Method>

<Method name="FullTextSearch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	// Data needed passed by BSTSWS array required for call
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=$Get(pParams("NAMESPACEID"))
	Set tSearchPattern=$Get(pParams("SEARCH"))

	Set SearchConvert=""
	For piece=1:1:$L(tSearchPattern,"'") {
		Set string=$Piece(tSearchPattern,"'",piece)
		Set SearchConvert=SearchConvert_$Select(piece>1:"''",1:"")_string
	}
	Set tSearchPattern=SearchConvert

	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tSType=$Get(pParams("STYPE"))
	Set tSubset=$Get(pParams("SUBSET"))
	Set tExactMatch=$Get(pParams("EXACTMATCH"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))
	
	//Assemble subset
	Set SubsetList=""
	For piece=1:1:$L(tSubset,"~") {
		Set sub=$Piece(tSubset,"~",piece)
		If sub]"" {
			Set SubsetList = SubsetList_$Select(SubsetList]"":",",1:"")_"'"_sub_"'"
			
		}	
	}

	//Handle maximum records
	Set tMaxResults=$Get(pParams("MAXRECS")) If tMaxResults="" Set tMaxResults=25

	//Set up location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tStatus=0
	Set pResult=1	
    
    //New search definition
    Set SQLSearch="DECLARE @RC int"
	Set SQLSearch=SQLSearch_" DECLARE @Searchtext varchar(200) = '"_tSearchPattern_"',"
	Set SQLSearch=SQLSearch_" @NumRecs int = "_tMaxResults_","
    Set SQLSearch=SQLSearch_" @Namespace varchar(10) = '"_tNamespaceID_"',"
    Set SQLSearch=SQLSearch_" @Exactmatch varchar(2) = '"_tExactMatch_"',"
    Set SQLSearch=SQLSearch_" @Subsets nvarchar(2000) = "
    
    //Put in subsets
    If (tNamespaceID=36)!(tNamespaceID=1552) {
	    Set SQLSearch=SQLSearch_"'"_$TR(SubsetList,"'")_"',"
    }
    If (tNamespaceID'=36),(tNamespaceID'=1552) {
	    Set SQLSearch=SQLSearch_"'',"
    }
    
	Set SQLSearch=SQLSearch_" @Status varchar(2) = 'A',"
    Set SQLSearch=SQLSearch_" @Revision_In datetime = '"_tSnapshotDate_"'"
	Set SQLSearch=SQLSearch_" EXECUTE @RC = [dbo].[dts_searchterms_cond]"
   	Set SQLSearch=SQLSearch_" @Searchtext,"
   	Set SQLSearch=SQLSearch_" @NumRecs,"
   	Set SQLSearch=SQLSearch_" @Namespace,"
   	Set SQLSearch=SQLSearch_" @Subsets,"
   	Set SQLSearch=SQLSearch_" @Status,"
   	Set SQLSearch=SQLSearch_" @Revision_In,"
   	Set SQLSearch=SQLSearch_" @Exactmatch"

	If $Get(tDebug) {
		Write !!,"SQL Call: ",SQLSearch,!
	}
		
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.executeSQL(SQLSearch)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","executeSQL","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","executeSQL","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","executeSQL","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","executeSQL","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","executeSQL","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","executeSQL","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
	
	//Display results returned
	If $Get(tDebug) {
		Write !,tSearchPattern," results returned: ",tSC.Count()
	}

	// Web call completed. Parse response...
	Set tCount=tSC.Count()
	
	Set tCounter=0
	For tKey=1:1:tCount {
		
		Set tResult=##class(BSTS.ns2.stringArray).%New()
		Set tResult=tSC.GetAt(tKey)
		Set DescId=tResult.item.GetAt(3)
		Set Term=tResult.item.GetAt(4)
		Set DTSId=tResult.item.GetAt(6)

		If $Get(tDebug) {
			W !!,"#: ",tKey
			W !,"DescId: ",DescId
			W !,"Term: ",Term
			W !,"DTSId: ",DTSId
		}
		
		//Save entry
		If DTSId>0 {
			Set tCounter=tCounter+1
			Set ^TMP("BSTSCMCL",$job,tCounter)=DTSId_"^"_DescId_"^"_Term
		}
	
	}
	
	//End Here - instead of parsing
	Quit 1_"^^"_..GetElapsedTime(tStartTime,$now())
]]></Implementation>
</Method>

<Method name="getListofSubsets">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	// Data needed passed by BSTSWS array required for call
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=$Get(pParams("NAMESPACEID"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))
	
	//Set up location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tStatus=0
	Set pResult=1
	
    //New search definition
	Set SQLSearch="DECLARE @return_value int"
	Set SQLSearch=SQLSearch_" EXEC @return_value = [dbo].[dts_getsubsets]"
	Set SQLSearch=SQLSearch_" @Namespace = N'"_tNamespaceID_"'"

    I $Get(tDebug) {
		Write !!,"SQL Call: ",SQLSearch,!
	}
	
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.executeSQL(SQLSearch)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","executeSQL","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","executeSQL","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","executeSQL","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","executeSQL","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","executeSQL","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","executeSQL","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
	
	//Display results returned
	If $Get(tDebug) {
		Write !," Subsets returned: ",tSC.Count()
	}

	// Web call completed. Parse response...
	Set tCount=tSC.Count()
	
	Set tCounter=0
	For tKey=1:1:tCount {
		
		Set tResult=##class(BSTS.ns2.stringArray).%New()
		Set tResult=tSC.GetAt(tKey)
		Set tSubset=tResult.item.GetAt(1)
		
		If $Get(tDebug) {
			W !!,"#: ",tKey
			W !,"Subset: ",tSubset
		}
		
		//Save entry
		If tSubset]"" {
			Set tCounter=tCounter+1
			Set ^TMP("BSTSCMCL",$job,tCounter)=tSubset
		}
	
	}

	//End Here - instead of parsing
	Quit 1_"^^"_..GetElapsedTime(tStartTime,$now())
]]></Implementation>
</Method>

<Method name="executeConceptTextSearch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	// Data needed passed by BSTSWS array required for call
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=$Get(pParams("NAMESPACEID"))
	Set tSearchPattern=$Get(pParams("SEARCH"))

	Set SearchConvert=""
	For piece=1:1:$L(tSearchPattern,"'") {
		Set string=$Piece(tSearchPattern,"'",piece)
		Set SearchConvert=SearchConvert_$Select(piece>1:"''",1:"")_string
	}
	Set tSearchPattern=SearchConvert
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tEpochDt=$$EXDT2EP^BSTSUTIL($P(tSnapshotDate," ",1,2))
	Set tSType=$Get(pParams("STYPE"))
	Set tSubset=$Get(pParams("SUBSET"))
	Set tExactMatch=$Get(pParams("EXACTMATCH"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))

	//Assemble subset
	Set SubsetList=""
	For piece=1:1:$L(tSubset,"~") {
		Set sub=$Piece(tSubset,"~",piece)
		If sub]"" {
			Set SubsetList = SubsetList_$Select(SubsetList]"":",",1:"")_"'"_sub_"'"
			
		}	
	}

	//Handle maximum records - need to increase for FSN searches due to duplicates returned
	Set tMaxResults=$Get(pParams("MAXRECS")) If tMaxResults="" Set tMaxResults=25

	//Set up location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"
	Set tStatus=0
	Set pResult=1	

    //New search definition
    Set SQLSearch="DECLARE @RC int,"
    Set SQLSearch=SQLSearch_" @Searchtext nvarchar(2000) = '"_tSearchPattern_"',"    
	Set SQLSearch=SQLSearch_" @NumRecs int = "_tMaxResults_","
    Set SQLSearch=SQLSearch_" @Namespace varchar(10) = '"_tNamespaceID_"',"
    Set SQLSearch=SQLSearch_" @Exactmatch varchar(2) = '"_tExactMatch_"',"
    Set SQLSearch=SQLSearch_" @Subsets nvarchar(2000) = "

    //Put in subsets
    If (tNamespaceID=36)!(tNamespaceID=1552) {
	    Set SQLSearch=SQLSearch_"'"_$TR(SubsetList,"'")_"',"
    }
    If (tNamespaceID'=36),(tNamespaceID'=1552) {
	    Set SQLSearch=SQLSearch_"'',"
    }

	Set SQLSearch=SQLSearch_" @Status varchar(2) = 'A',"
    Set SQLSearch=SQLSearch_" @Revision_In datetime = '"_tSnapshotDate_"'"
	Set SQLSearch=SQLSearch_" EXECUTE @RC = [dbo].[dts_searchconcepts_cond]"
   	Set SQLSearch=SQLSearch_" @Searchtext,"
   	Set SQLSearch=SQLSearch_" @NumRecs,"
   	Set SQLSearch=SQLSearch_" @Namespace,"
   	Set SQLSearch=SQLSearch_" @Subsets,"
   	Set SQLSearch=SQLSearch_" @Status,"
   	Set SQLSearch=SQLSearch_" @Revision_In,"
   	Set SQLSearch=SQLSearch_" @Exactmatch"
   	
	I $Get(tDebug) {
		Write !!,"SQL Call: ",SQLSearch,!
	}

	/*
	//BEE;BSTS*1.0*2;Old web service call no longer available with p4.2
	//               Switching to different call
    //---------------------------------------------------------------------------	
	Set tAttributeSetDesc=##class(BSTS.ns1.TConceptAttributeSetDescriptor).%New()
	Set tAttributeSetDesc.DEFAULTLIMIT=0
	Set tAttributeSetDesc.allPropertyTypes="false"
	Set tAttributeSetDesc.allSynonymTypes="false"
	Set tAttributeSetDesc.allInverseRoleTypes="false"
	Set tAttributeSetDesc.allRoleTypes="false"
	Set tAttributeSetDesc.attributesLimit="100"
	Set tAttributeSetDesc.definedViewAttributes="false"
	Set tAttributeSetDesc.queryHasSubs="0"
	Set tAttributeSetDesc.queryHasSups="0"
	Set tAttributeSetDesc.subconcepts="0"
	Set tAttributeSetDesc.superconcepts="false"
	
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.executeConceptTextSearch(SQLSearch,tAttributeSetDesc)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","executeConceptTextSearch","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","executeConceptTextSearch","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","executeConceptTextSearch","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","executeConceptTextSearch","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","executeConceptTextSearch","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","executeConceptTextSearch","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
	
	//Display results returned
	If $Get(tDebug) {
		Write !,tSearchPattern," results returned: ",tSC.Count()
	}

	// Web call completed. Parse response...
	Set tCount=tSC.Count()

	//Reset array to screen out duplicates
	Kill ConceptList
		
	Set tCounter=0
	For tKey=1:1:tCount {
		
		Set tResult=##class(BSTS.ns1.TConceptSearchResult).%New()
		Set tResult=tSC.GetAt(tKey)
		Set tInfo=##class(BSTS.ns1.TOntylogConcept).%New()
		Set tInfo=tResult.ontylogConcept
		Set Term=tInfo.name
		Set DTSId=tInfo.id
				
		If DTSId>0 {
			
			If '$D(ConceptList(DTSId)) {
				Set tCounter=tCounter+1
				Set ^TMP("BSTSCMCL",$job,tCounter)=DTSId_"^^"_Term
				Set ConceptList(DTSId)=""
			}
		}
	
	}
	*/
		
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.executeSQL(SQLSearch)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","executeSQL","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","executeSQL","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","executeSQL","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","executeSQL","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","executeSQL","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","executeSQL","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
	
	//Display results returned
	If $Get(tDebug) {
		Write !,tSearchPattern," results returned: ",tSC.Count()
	}

	// Web call completed. Parse response...
	Set tCount=tSC.Count()
	
	Set tCounter=0
	For tKey=1:1:tCount {
		
		Set tResult=##class(BSTS.ns2.stringArray).%New()
		Set tResult=tSC.GetAt(tKey)
		Set ConcId=tResult.item.GetAt(6)
		Set Term=tResult.item.GetAt(5)
		Set DTSId=tResult.item.GetAt(4)

		If $Get(tDebug) {
			W !!,"#: ",tKey
			W !,"ConcId: ",ConcId
			W !,"Term: ",Term
			W !,"DTSId: ",DTSId
		}
		
		//Save entry
		If DTSId>0 {
			Set tCounter=tCounter+1
			Set ^TMP("BSTSCMCL",$job,tCounter)=DTSId_"^"_Term_"^"
		}
	
	}
	
	//End Here - instead of parsing
	Quit 1_"^^"_..GetElapsedTime(tStartTime,$now())
]]></Implementation>
</Method>

<Method name="GetNamespaces">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	// Data needed passed by BSTSWS array required for call	

	Set tDebug=$Get(pParams("DEBUG"))
	Set tURLRoot=$Get(pParams("URLROOT"))
	Set tServiceURLPath=$Get(pParams("SERVICEPATH"))
	Set tServicePort=$Get(pParams("PORT"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))

	//Get location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=tURLRoot_":"_tServicePort_tServiceURLPath_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=tURLRoot_":"_tServicePort_tServiceURLPath_"/DtsQueryDaoWS"

	Set tStatus=0
	Set tSC=##class(%ListOfObjects).%New()
	
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	
	Set tStartTime=$now()
	try {
		Set tSC=tWebClient.getNamespaces()
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
		}
		Set tCounter=0
		For tKey=1:1:tSC.Count() {
			Set tCounter=tCounter+1
			Set tObject=##class(BSTS.ns1.TNamespace).%New()
			Set tObject=tSC.GetAt(tKey)
			If (tDebug) {
				Do $SYSTEM.OBJ.Dump(tObject)
			}
			// Populate the array with some of that data	
			Set pResult(tCounter,"NAMESPACE","NAME")=tObject.name
			Set pResult(tCounter,"NAMESPACE","CODE")=tObject.code
			Set pResult(tCounter,"NAMESPACE","ID")=tObject.id
		}
		Set pResult="1^^"_..GetElapsedTime(tStartTime,$now())
		Set tStatus=pResult
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetVersions">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// Data needed passed by BSTSWS array required for call	
	Set tDebug=$Get(pParams("DEBUG"))
	Set tURLRoot=$Get(pParams("URLROOT"))
	Set tServiceURLPath=$Get(pParams("SERVICEPATH"))
	Set tServicePort=$Get(pParams("PORT"))
	Set tWebServiceTimeout=2    //Hardset to 2 seconds // $Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=$Get(pParams("NAMESPACEID"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))

	//Get location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=tURLRoot_":"_tServicePort_tServiceURLPath_"/NamespaceDaoService/NamespaceDaoWS"
	//Set tLocation=tURLRoot_":"_tServicePort_tServiceURLPath_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=tURLRoot_":"_tServicePort_tServiceURLPath_"/DtsQueryDaoWS"

	Set tStatus=0
		
	Set tSC=##class(%ListOfObjects).%New()
	
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout
	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	try {
		Set tSC=tWebClient.getVersions(tNamespaceID)
		If (tDebug) {
			// Write tWebClient.HttpResult,!
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
		}
		Set tCounter=0
		For tKey=1:1:tSC.Count() {
			Set tCounter=tCounter+1
			Set tObject=##class(BSTS.ns1.TContentVersion).%New()
			Set tObject=tSC.GetAt(tKey)
			If (tDebug) {
				Do $SYSTEM.OBJ.Dump(tObject)
			}
			// Populate the array with some of that data	
			If ((tObject.id)]"") {
				Set ^TMP("BSTSCMCL",$job,tCounter,"VERSION",tObject.id,"NAME")=tObject.name
				Set ^TMP("BSTSCMCL",$job,tCounter,"VERSION",tObject.id,"RELEASEDATE")=tObject.releaseDate
				Set ^TMP("BSTSCMCL",$job,tCounter,"VERSION",tObject.id,"NAMESPACEID")=tNamespaceID
			}
		}
		Set pResult="1^^"_..GetElapsedTime(tStartTime,$now())
		Set tStatus=pResult
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="FindConcById">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// Data needed passed by BSTSWS array required for call
	Set tDebug=$Get(pParams("DEBUG"))
	Set tURLRoot=$Get(pParams("URLROOT"))
	Set tServiceURLPath=$Get(pParams("SERVICEPATH"))
	Set tServicePort=$Get(pParams("PORT"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=$Get(pParams("NAMESPACEID"))
	Set tConceptID=$Get(pParams("CONCEPTID"))
	Set tDefaultLimit=+$Get(pParams("DEFAULTLIMIT"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))

	//Get location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=tURLRoot_":"_tServicePort_tServiceURLPath_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=tURLRoot_":"_tServicePort_tServiceURLPath_"/DtsQueryDaoWS"
	Set tStatus=0

	Set tConceptAttributeSet=##class(BSTS.ns1.TConceptAttributeSetDescriptor).%New()
	Set tConceptAttributeSet.DEFAULTLIMIT=tDefaultLimit
	
	// Loop through and drill down the propertyType values to create individual instances of BSTS.ns1.TPropertyType
	// and add to the tConceptAttributeSet
		
	Set tSC=##class(BSTS.ns1.TOntylogConcept).%New()
	
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	try {
		
		Set tSC=tWebClient.findConceptById(tConceptID,tNamespaceID,tConceptAttributeSet)
		If (tDebug) {
			// Write tWebClient.HttpResult,!
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
		}
		If (tDebug) {
				Do $SYSTEM.OBJ.Dump(tSC)
		}

		Set pResult="1^^"_..GetElapsedTime(tStartTime,$now())
		Set tStatus=pResult
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetConceptDetail">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// Data needed passed by BSTSWS array required for call	
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=$Get(pParams("NAMESPACEID"))
	Set tSearchPattern=$Get(pParams("SEARCH"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))
	
	If tSnapshotDate]"" {
		Set tSnapshotDate=$$SQL2XML^BSTSUTIL(tSnapshotDate)
	}
	
	Set tMaxResults=$Get(pParams("MAXRECS")) S tMaxResults=100
	
	//Get location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tStatus=0
	Set pResult=1
	
	Set tStartTime=$now()

	Set tConceptID=$Get(pParams("DTSID"))
			
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Do the sub call to findConceptById()
	Set tAttSetDescForID=##class(BSTS.ns1.TConceptAttributeSetDescriptor).%New()
			
	Set tAttSetDescForID.DEFAULTLIMIT=0

	Set tAttSetDescForID.allPropertyTypes="false"
	Set tAttSetDescForID.name="ASD Concept ID"
	Set tAttSetDescForID.snapshotDate=tSnapshotDate
	Set tAttSetDescForID.superconcepts="1"

	Set tPropType1=##class(BSTS.ns1.TPropertyType).%New()
	Set tPropType1.namespaceId=tNamespaceID
	Set tPropType1.id="12"
	Do tAttSetDescForID.propertyTypes.Insert(tPropType1)
	Set tPropType2=##class(BSTS.ns1.TPropertyType).%New()
	Set tPropType2.namespaceId=tNamespaceID
	Set tPropType2.id="101"
	Do tAttSetDescForID.propertyTypes.Insert(tPropType2)
	Set tPropType3=##class(BSTS.ns1.TPropertyType).%New()
	Set tPropType3.namespaceId=tNamespaceID
	Set tPropType3.id="6"
	Do tAttSetDescForID.propertyTypes.Insert(tPropType3)
	Set tPropType4=##class(BSTS.ns1.TPropertyType).%New()
	Set tPropType4.namespaceId=tNamespaceID
	Set tPropType4.id="993"
	Do tAttSetDescForID.propertyTypes.Insert(tPropType4)
	Set tPropType5=##class(BSTS.ns1.TPropertyType).%New()
	Set tPropType5.namespaceId=35290
	Set tPropType5.id="2"
	Do tAttSetDescForID.propertyTypes.Insert(tPropType5)
	Set tPropType6=##class(BSTS.ns1.TPropertyType).%New()
	
	Set tPropType6.namespaceId=32768
	If tNamespaceID=1552 {
			Set tPropType6.namespaceId=32769		
	}
	If tNamespaceID=36 {
	Set tPropType6.namespaceId=32768
	}
	
	Set tPropType6.code="IHS"
	Set tPropType6.id="1"
	Do tAttSetDescForID.propertyTypes.Insert(tPropType6)
	
	/*//IHS Med Route
	If tNamespaceID=32774 {
		Set tPropTypeS=##class(BSTS.ns1.TPropertyType).%New()
		Set tPropTypeS.namespaceId=tNamespaceID
		Set tPropTypeS.id="1"
		Set tPropTypeS.name="Code in Source"
		Do tAttSetDescForID.propertyTypes.Insert(tPropTypeS)
	}*/

	//SIGNS/SYMPTOMS
	If tNamespaceID=32772 {
		Set tPropTypeS=##class(BSTS.ns1.TPropertyType).%New()
		Set tPropTypeS.namespaceId=tNamespaceID
		Set tPropTypeS.id="1"
		Set tPropTypeS.name="Code in Source"
		Do tAttSetDescForID.propertyTypes.Insert(tPropTypeS)
		
		If (tDebug) {
			W !!,"PROPERTY S: ",!
			Do $SYSTEM.OBJ.Dump(tPropTypeS)
			w !!
		}

	}
	
	//GMRA Allergies with Maps
	If tNamespaceID=32773 {
		Set tPropTypeA=##class(BSTS.ns1.TPropertyType).%New()
		Set tPropTypeA.namespaceId=tNamespaceID
		Set tPropTypeA.id="1"
		Set tPropTypeA.name="Code in Source"
		Do tAttSetDescForID.propertyTypes.Insert(tPropTypeA)
	}

	//ECLIDS
	If tNamespaceID=32770 {
		Set tPropTypeE=##class(BSTS.ns1.TPropertyType).%New()
		Set tPropTypeE.namespaceId=32770
		Set tPropTypeE.id="1"
		Set tPropTypeE.name="Code in Source"
		Do tAttSetDescForID.propertyTypes.Insert(tPropTypeE)
	}

	//CPT Meds with Maps
	If tNamespaceID=32775 {
		Set tPropTypeC=##class(BSTS.ns1.TPropertyType).%New()
		Set tPropTypeC.namespaceId=32775
		Set tPropTypeC.id="2"
		Set tPropTypeC.name="Code in Source"
		Do tAttSetDescForID.propertyTypes.Insert(tPropTypeC)
	}

	//IHS VANDF
	If tNamespaceID=32771 {
		Set tPropTypeI=##class(BSTS.ns1.TPropertyType).%New()
		Set tPropTypeI.namespaceId=tNamespaceID
		Set tPropTypeI.id="2"
		Set tPropTypeI.name="Code in Source"
		Do tAttSetDescForID.propertyTypes.Insert(tPropTypeI)
	}

	//UNII
	If tNamespaceID=5180 {
		Set tPropType7=##class(BSTS.ns1.TPropertyType).%New()
		Set tPropType7.namespaceId=tNamespaceID
		Set tPropType7.id="1"
		Set tPropType7.name="Code in Source"
		Do tAttSetDescForID.propertyTypes.Insert(tPropType7)
	}
	
	//RXNORM
	If tNamespaceID=1552 {
		Set tPropType8=##class(BSTS.ns1.TPropertyType).%New()
		Set tPropType8.namespaceId=tNamespaceID
		Set tPropType8.id="10"
		Set tPropType8.name="Code in Source"
		Do tAttSetDescForID.propertyTypes.Insert(tPropType8)
		
		//NDC
		Set tPropTypeN=##class(BSTS.ns1.TPropertyType).%New()
		Set tPropTypeN.namespaceId=tNamespaceID
		Set tPropTypeN.id="110"
		Set tPropTypeN.name="NDC"
		Set tPropTypeN.attachesTo="C"
		Do tAttSetDescForID.propertyTypes.Insert(tPropTypeN)

		//VUID
		Set tPropTypeV=##class(BSTS.ns1.TPropertyType).%New()
		Set tPropTypeV.namespaceId=tNamespaceID
		Set tPropTypeV.id="209"
		Set tPropTypeV.name="VUID"
		Set tPropTypeV.attachesTo="C"
		Do tAttSetDescForID.propertyTypes.Insert(tPropTypeV)
		
		Set tPropTypeTT=##class(BSTS.ns1.TPropertyType).%New()
		Set tPropTypeTT.namespaceId=tNamespaceID
		Set tPropTypeTT.id="120"
		Set tPropTypeTT.name="TTY"
		Set tPropTypeTT.attachesTo="C"
		Do tAttSetDescForID.propertyTypes.Insert(tPropTypeTT)		

	}
	
	Set tPropType9=##class(BSTS.ns1.TPropertyType).%New()
	Set tPropType9.namespaceId=tNamespaceID
	Set tPropType9.id="14"
	Do tAttSetDescForID.propertyTypes.Insert(tPropType9)

	//BSTS*1.0*7;Return all inverse associations to get equivalencies	
	//Set tAttSetDescForID.allInverseAssociationTypes="0"
	//Set tInvAsscTyp=##class(BSTS.ns1.TAssociationType).%New()
	//Set tInvAsscTyp.namespaceId=tNamespaceID
	//Set tInvAsscTyp.id="106"
	//Set tInvAsscTyp.name="has_tradename"
	//Do tAttSetDescForID.inverseAssociationTypes.Insert(tInvAsscTyp)
	Set tAttSetDescForID.allInverseAssociationTypes="1"
		
	Set tAttSetDescForID.allAssociationTypes="1"
	Set tAttSetDescForID.allSynonymTypes="1"
	Set tAttSetDescForID.allRoleTypes="1"
	Set tAttSetDescForID.allInverseRoleTypes="0"
	Set tAttSetDescForID.definedViewAttributes="0"
	Set tAttSetDescForID.queryHasSubs="0"
	Set tAttSetDescForID.queryHasSups="0"
	Set tAttSetDescForID.subconcepts="1"
	Set tAttSetDescForID.superconcepts="1"
	Set tAttSetDescForID.attributesLimit=1000
	Set tConceptByIdResult=##class(BSTS.ns1.TOntylogConcept).%New()
	
	If (tDebug) {
		Do $SYSTEM.OBJ.Dump(tAttSetDescForID)
		W !!,"tConceptID: ",$G(tConceptID)
		W !,"tNamespaceID: ",$G(tNamespaceID)
	}

	try {
		Set tConceptByIdResult=tWebClient.findConceptById(tConceptID,tNamespaceID,tAttSetDescForID)
		
		If (tDebug) {
			W !!
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","findConceptById",tConceptByIdResult.id,"HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","findConceptById",tConceptByIdResult.id,"HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","findConceptById",tConceptByIdResult.id,"HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
		}		
	}
	Catch Exception {
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		}
		else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		//BSTS*1.0*6;Handle invalid DTSID
		if tErrorText["<INVALID OREF>" {
			Set pResult="1^Invalid DTSID"_"^"_..GetElapsedTime(tStartTime,$now())	
		}
		else {
			Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		}
		
		Set tStatus=pResult
		
	}
	
	//Set Return Values

	if pResult=1 {
	
		if '$IsObject(tConceptByIdResult) {
			//BSTS*1.0*6;If not an error they just passed in an invalid entry
			//Set pResult="0^Invalid Response Format"
			Set pResult="1^Invalid DTSID or Response Format"
		}
			
		if $IsObject(tConceptByIdResult) {	
			
			Set ^TMP("BSTSCMCL",$job,1,"DTSID")=tConceptByIdResult.id
			Set ^TMP("BSTSCMCL",$job,1,"NAMESP")=tNamespaceID
			Set ^TMP("BSTSCMCL",$job,1,"FSN",0)=tConceptByIdResult.revisionIn_"^"_tConceptByIdResult.revisionOut
			Set ^TMP("BSTSCMCL",$job,1,"FSN",1)=tConceptByIdResult.name
			Set ^TMP("BSTSCMCL",$job,1,"STS")=tConceptByIdResult.status
	
			Set tProperties=##class(%ListOfObjects).%New()
			Set tPropertyObject=##class(BSTS.ns1.TProperty).%New()
			Set tPropertyType=##class(BSTS.ns1.TPropertyType).%New()
			Set tProperties=tConceptByIdResult.properties
			Set tPropertyCount=0
			Set tSUBCount=0
			Set tICDCount=0
			Set tRICDCount=0
			Set tICDMCount=0
			Set tnsubCount=0
			Set tVUIDCount=0
			Set tNDCCount=0
			Set tTTYCount=0

			//Grab the name for use by 32774 - has to be handled different
			//from the other ones because it has no properties
			If (tNamespaceID=32774) {
				Set tCncName=tConceptByIdResult.name
				if tCncName]"" {
					Set ^TMP("BSTSCMCL",$job,1,"CONCEPTID")=tCncName_"^"_tConceptByIdResult.revisionIn_"^"_tConceptByIdResult.revisionOut
				}					
			}

			For tPropKey=1:1:tProperties.Count() {
				Set tPropertyObject=tProperties.GetAt(tPropKey)
				Set tRin=tPropertyObject.revisionIn
				Set tRout=tPropertyObject.revisionOut
				Set tPropertyType=tPropertyObject.propertyType
				
				If (tDebug) {
					Write "Property Type is "_tPropertyType.id,!
					Do $SYSTEM.OBJ.Dump(tPropertyObject)

				}
				
				//CURRENT STATUS
				If (tPropertyType.id)="14" {
						Set ^TMP("BSTSCMCL",$job,1,"CURRENT")=tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut_"^"_tPropertyObject.value
						Set ^TMP("BSTSCMCL",$job,1,"RVAL")=tRin_"^"_tRout
				}
				
				//Look for concept id
				
				//ECLID
				If (tNamespaceID=32770) { 
					If (tPropertyType.name="Code in Source") {
						Set ^TMP("BSTSCMCL",$job,1,"CONCEPTID")=tPropertyObject.value_"^"_tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut
					}
				}
				
				//CPT Meds with Maps
				If (tNamespaceID=32775) { 
					If (tPropertyType.name="Code in Source") {
						Set ^TMP("BSTSCMCL",$job,1,"CONCEPTID")=tPropertyObject.value_"^"_tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut
					}
				}
				
				//SNOMED
				If (tNamespaceID=36) { 
					If (tPropertyType.id="12") {
						Set ^TMP("BSTSCMCL",$job,1,"CONCEPTID")=tPropertyObject.value_"^"_tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut
					}
				}
				//UNII
				If (tNamespaceID=5180) {
					If (tPropertyType.id="1") {
						Set ^TMP("BSTSCMCL",$job,1,"CONCEPTID")=tPropertyObject.value_"^"_tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut
					}
				}
				//RXNORM
				If (tNamespaceID=1552) {
					If (tPropertyType.id="10") {
						Set ^TMP("BSTSCMCL",$job,1,"CONCEPTID")=tPropertyObject.value_"^"_tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut
					}
					If (tPropertyType.id="120") {
						Set tTTYCount=tTTYCount+1
						Set ^TMP("BSTSCMCL",$job,1,"TTY",tTTYCount)=tPropertyObject.value_"^"_tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut	
					}
				}

				//SPECIAL CODESETS
				
				//SIGNS/SYMPTOMS
				If (tNamespaceID=32772) {
					If (tPropertyType.id="1") {
						Set ^TMP("BSTSCMCL",$job,1,"CONCEPTID")=tPropertyObject.value_"^"_tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut				
					}
				}
				
				//ALLERGIES
				If (tNamespaceID=32773) {
					If (tPropertyType.id="1") {
						Set ^TMP("BSTSCMCL",$job,1,"CONCEPTID")=tPropertyObject.value_"^"_tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut				
					}
				}
				
				//INGREDIENTS
				If (tNamespaceID=32771) {
					If (tPropertyType.id="2") {
						Set ^TMP("BSTSCMCL",$job,1,"CONCEPTID")=tPropertyObject.value_"^"_tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut				
					}
				}

				//VUID
				If (tPropertyType.id="209") {
					Set tVUIDCount=tVUIDCount+1
					Set ^TMP("BSTSCMCL",$job,1,"VUID",tVUIDCount)=tPropertyObject.value_"^"_tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut
				}
				
				//NDC
				If (tPropertyType.id="110") {
					Set tNDCCount=tNDCCount+1
					Set ^TMP("BSTSCMCL",$job,1,"NDC",tNDCCount)=tPropertyObject.value_"^"_tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut
				}

				//ICD9 to SNOMED reverse mapping
				If ((tNamespaceID=36)&(tPropertyType.id="6")) {
					Set tRICDCount=tRICDCount+1
					Set ^TMP("BSTSCMCL",$job,1,"RICD9",tRICDCount)=tPropertyObject.value_"^"_tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut
				}
				
				//New subsets
				If (tNamespaceID=36)!(tNamespaceID=1552) { 
					If (tPropertyType.id="1") {
						Set tSUBCount=tSUBCount+1
						Set ^TMP("BSTSCMCL",$job,1,"SUB",tSUBCount)=tPropertyObject.value_"^"_tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut
					}
				}
				//ECLID Subset
				If (tNamespaceID=32770) { 
					If (tPropertyType.id="6") {
						Set tSUBCount=tSUBCount+1
						Set ^TMP("BSTSCMCL",$job,1,"SUB",tSUBCount)=tPropertyObject.value_"^"_tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut
					}
				}
				//CPT Meds with Maps
				If (tNamespaceID=32775) { 
					If (tPropertyType.id="1") {
						Set tSUBCount=tSUBCount+1
						Set ^TMP("BSTSCMCL",$job,1,"SUB",tSUBCount)=tPropertyObject.value_"^"_tPropertyObject.revisionIn_"^"_tPropertyObject.revisionOut
					}
				}

				If (tPropertyType.id="2") {
					Set tICDMCount=tICDMCount+1
					Set tQualifier=##class(BSTS.ns1.TQualifier).%New()
					Set mapadvice=tPropertyObject.value
					Set tQualifier=tPropertyObject.qualifiers
										
					Set tQTCount=tPropertyObject.qualifiers.Count()
					If mapadvice]"" {
						
						//Save map advice
						Set tRin=tPropertyObject.revisionIn
						Set tRout=tPropertyObject.revisionOut
												
						For tQualT=1:1:tQTCount {
							Set tqual=##class(BSTS.ns1.TQualifier).%New()
							Set tqual=tPropertyObject.qualifiers.GetAt(tQualT)
							Set val=tqual.value	
						
							Set tQualType=##class(BSTS.ns1.TQualifierType).%New()
							Set tQualType=tqual.qualifierType.name
							Set tQualId=##class(BSTS.ns1.TQualifierType).%New()
							Set tQualId=tqual.qualifierType.id
							Set tRin=tqual.revisionIn
							Set tRout=tqual.revisionOut
							//Save other map info
							If tQualType]"" {
								Set ^TMP("BSTSCMCL",$job,1,"ICDM",tICDMCount,tQualType)=val_"^"_tRin_"^"_tRout
							}

						}
					}
					
				}
			}
						
			// SYN level of TMP
			Set tSynonymList=""
			Set tSynonymList=##class(%ListOfObjects).%New()
			Set tSynonymList=tConceptByIdResult.synonyms
			Set tSynonym=##class(BSTS.ns1.TSynonym).%New()
			Set tTerm=##class(BSTS.ns1.TTerm).%New()
			Set tAssocType=##class(BSTS.ns1.TAssociationType).%New()
			Set tConcept=##class(BSTS.ns1.TOntylogConcept).%New()
			
				Set tSYNCount=0
				For tSynonymKey=1:1:tSynonymList.Count() {
					Set tSynonym=tSynonymList.GetAt(tSynonymKey)
		
					If (tDebug) {
						Do $SYSTEM.OBJ.Dump(tSynonym)
					}
					Set tTerm=tSynonym.term
					Set tAssocType=tSynonym.associationType
					Set tConcept=tSynonym.concept
					Set tSYNCount=tSYNCount+1
					
					//Handle synonym types
					Set tSYNType=tAssocType.name
					Set tSType=5
					If tSYNType="Synonym" {
						Set tSType=2
					}
					If tSYNType="Clinician Term" {
						Set tSType=3
					}
					If tSYNType="Consumer Term" {
						Set tSType=4
					}
					If tSynonym.preferred=1 {
						Set tSType=1
					}
					
					Set ^TMP("BSTSCMCL",$job,1,"SYN",tSType,tSYNCount,0)=tTerm.code_"^"_tSynonym.preferred_"^"_tTerm.revisionIn_"^"_tTerm.revisionOut
					Set ^TMP("BSTSCMCL",$job,1,"SYN",tSType,tSYNCount,1)=tTerm.name
				}
			
			// ISA level of TMP
			Set tISACount=0
			Set tSuperConceptsList=##class(%ListOfObjects).%New()
			Set tSuperConceptsList=tConceptByIdResult.superconcepts
			Set tSuperConcept=##class(BSTS.ns1.TConceptNav).%New()
			Set tSuperConceptObj=##class(BSTS.ns1.TOntylogConcept).%New()
			Set tSuperConceptKey=0
			If (tDebug) {
				Write "SUPER CONCEPTS LIST COUNT="_tSuperConceptsList.Count(),!
			}
			For tSuperConceptKey=1:1:tSuperConceptsList.Count() {
				Set tSuperConcept=tSuperConceptsList.GetAt(tSuperConceptKey)
				If (tDebug) {
					Do $SYSTEM.OBJ.Dump(tSuperConcept)
				}
				Set tSuperConceptObj=tSuperConcept.concept
				Set tISACount=tISACount+1
				Set ^TMP("BSTSCMCL",$job,1,"ISA",tISACount,0)=tSuperConceptObj.id_"^"_tSuperConceptObj.revisionIn_"^"_tSuperConceptObj.revisionOut
				Set ^TMP("BSTSCMCL",$job,1,"ISA",tISACount,1)=tSuperConceptObj.name
			}	
	
			// Concept Children of TMP
			Set tSubCCount=0
			Set tSubCConceptsList=##class(%ListOfObjects).%New()
			Set tSubCConceptsList=tConceptByIdResult.subconcepts
			Set tSubCConcept=##class(BSTS.ns1.TConceptNav).%New()
			Set tSubCConceptObj=##class(BSTS.ns1.TOntylogConcept).%New()
			Set tSubCConceptKey=0
			If (tDebug) {
				Write "SUB CONCEPTS LIST COUNT="_tSubCConceptsList.Count(),!
			}
			For tSubCConceptKey=1:1:tSubCConceptsList.Count() {
				Set tSubCConcept=tSubCConceptsList.GetAt(tSubCConceptKey)
				If (tDebug) {
					Do $SYSTEM.OBJ.Dump(tSubCConcept)
				}
				Set tSubCConceptObj=tSubCConcept.concept
				Set tSubCCount=tSubCCount+1
				Set ^TMP("BSTSCMCL",$job,1,"SUBC",tSubCCount,0)=tSubCConceptObj.id_"^"_tSubCConceptObj.revisionIn_"^"_tSubCConceptObj.revisionOut
				Set ^TMP("BSTSCMCL",$job,1,"SUBC",tSubCCount,1)=tSubCConceptObj.name
			}	

			// Load in Inverse Associations
			Set tIAssociations=##class(%ListOfObjects).%New()
			Set tIAssocObject=##class(BSTS.ns1.TConceptAssociation).%New()
			Set tIAssocType=##class(BSTS.ns1.TAssociationType).%New()
			Set tIAssociations=tConceptByIdResult.inverseAssociations
			Set tIAssocCount=0
			Set tAssocILEquiv=0
			For tIAssocKey=1:1:tIAssociations.Count() {
				Set tIAssocObject=tIAssociations.GetAt(tIAssocKey)
				Set tIAssocType=tIAssocObject.associationType
				
				//BSTS*1.0*7;Include equivalent concepts
				//Include Equivalent Concepts to this Concept
				if tIAssocObject.associationType.namespaceId=32780 {
					Set tLatVariant=tIAssocObject.associationType.name
					Set tLatDTSId=tIAssocObject.fromConcept.id
					Set tLatConcId=tIAssocObject.fromConcept.code
					Set tLatRevIn=tIAssocObject.revisionIn
					Set tLatRevOut=tIAssocObject.revisionOut
					Set tAssocILEquiv=tAssocILEquiv+1
					Set ^TMP("BSTSCMCL",$job,1,"AIEQ",tAssocILEquiv)=tLatVariant_"^"_tLatDTSId_"^"_tLatConcId_"^"_tLatRevIn_"^"_tLatRevOut
				}
				
				//Only include trade name entries
				Set ttrade=tIAssocType.name
				if ttrade["has_tradename" {
					Set tCode=tIAssocObject.fromConcept.code
					Set tDTSId=tIAssocObject.fromConcept.id
					Set tNameId=tIAssocObject.fromConcept.namespaceId
					Set tName=tIAssocObject.fromConcept.name
					Set tIAssocCount=tIAssocCount+1
					Set ^TMP("BSTSCMCL",$job,1,"IAS",tIAssocCount)=tCode_"^"_tNameId_"^"_tDTSId_"^"_tName
		
					//Save the associations
					If (tDebug) {
						Do $SYSTEM.OBJ.Dump(tIAssocObject)
					}
				}
			}			
			
			// Load in Roles
			Set tRoles=##class(%ListOfObjects).%New()
			Set tRoleObject=##class(BSTS.ns1.TRole).%New()
			Set tRoleType=##class(BSTS.ns1.TRoleType).%New()
			Set tRoles=tConceptByIdResult.roles
			Set tRolesCount=0
			For tRolesKey=1:1:tRoles.Count() {
				Set tRoleObject=tRoles.GetAt(tRolesKey)
				Set tRoleType=tRoleObject.roleType
				
				//Only include map to entries
				Set tRoleName=tRoleType.name
				if tRoleName["Clinical course" {
					Set tName=tRoleObject.valueConcept.name
					
					//Acute
					If tName["Sudden onset AND/OR short duration" {
						Set tRolesCount=tRolesCount+1
						Set ^TMP("BSTSCMCL",$job,1,"CSTS",tRolesCount)="A^"_tRoleName
					}
		
					//Chronic
					If tName["Chronic" {
						Set tRolesCount=tRolesCount+1
						Set ^TMP("BSTSCMCL",$job,1,"CSTS",tRolesCount)="C^"_tRoleName
					}
				}
			}			
			
			// Load in Associations
			Set tAssociations=##class(%ListOfObjects).%New()
			Set tAssocObject=##class(BSTS.ns1.TConceptAssociation).%New()
			Set tAssocType=##class(BSTS.ns1.TAssociationType).%New()
			Set tAssociations=tConceptByIdResult.associations
			Set tQualifiers=##class(BSTS.ns1.TQualifier).%New()
			Set tQualifierType=##class(BSTS.ns1.TQualifierType).%New()
			Set tAssocCount=0
			Set tAssoc10Cnt=0
			Set tAssoc9Cnt=0
			Set tAssoc10PCnt=0
			Set tAssocLEquiv=0
			Set tAssocRepCnt=0
						
			For tAssocKey=1:1:tAssociations.Count() {
				Set tAssocObject=tAssociations.GetAt(tAssocKey)
				Set tAssocType=tAssocObject.associationType
				
				//BSTS*1.0*7;Include equivalent concepts
				//Include Equivalent Concepts to this Concept
				if tAssocObject.associationType.namespaceId=32780 {
					Set tLatVariant=tAssocObject.associationType.name
					Set tLatDTSId=tAssocObject.toConcept.id
					Set tLatConcId=tAssocObject.toConcept.code
					Set tLatRevIn=tAssocObject.revisionIn
					Set tLatRevOut=tAssocObject.revisionOut
					Set tAssocLEquiv=tAssocLEquiv+1
					Set ^TMP("BSTSCMCL",$job,1,"AEQ",tAssocLEquiv)=tLatVariant_"^"_tLatDTSId_"^"_tLatConcId_"^"_tLatRevIn_"^"_tLatRevOut
				}

				//Only include map to entries
				Set tMapTo=tAssocType.name
				
				//Only include map to entries
				if tMapTo["Map to" {
					Set tCode=tAssocObject.toConcept.code
					Set tDTSId=tAssocObject.toConcept.id
					Set tNameId=tAssocObject.toConcept.namespaceId
					Set tName=tAssocObject.toConcept.name
					Set tAssocCount=tAssocCount+1
					Set ^TMP("BSTSCMCL",$job,1,"ASC",tAssocCount)=tCode_"^"_tNameId_"^"_tDTSId_"^"_tName
		
					//Save the associations
					If (tDebug) {
						Do $SYSTEM.OBJ.Dump(tAssocObject)
					}
				}

				//BSTS*1.0*8;Include Replacements
				if tAssocObject.associationType.namespaceId=32780 {
					Set tLatVariant=tAssocObject.associationType.name
					Set tLatDTSId=tAssocObject.toConcept.id
					Set tLatConcId=tAssocObject.toConcept.code
					Set tLatRevIn=tAssocObject.revisionIn
					Set tLatRevOut=tAssocObject.revisionOut
					Set tAssocLEquiv=tAssocLEquiv+1
					Set ^TMP("BSTSCMCL",$job,1,"AEQ",tAssocLEquiv)=tLatVariant_"^"_tLatDTSId_"^"_tLatConcId_"^"_tLatRevIn_"^"_tLatRevOut
				}
				
				if (tMapTo["REPLACED BY")!(tMapTo["SAME AS")!(tMapTo["MAY BE") {
					Set tCode=tAssocObject.toConcept.code
					Set tDTSId=tAssocObject.toConcept.id
					Set tNameId=tAssocObject.toConcept.namespaceId
					Set tName=tAssocObject.toConcept.name
					Set tRevisionIn=tAssocObject.revisionIn
					Set tRevisionOut=tAssocObject.revisionOut
					Set tAssocRepCnt=tAssocRepCnt+1
					Set ^TMP("BSTSCMCL",$job,1,"REP",tAssocRepCnt)=tCode_"^"_tNameId_"^"_tDTSId_"^^"_tRevisionIn_"^"_tRevisionOut_"^"_tMapTo
		
					//Save the associations
					If (tDebug) {
						Do $SYSTEM.OBJ.Dump(tAssocObject)
					}
				}

				//Include ICD-10 Autocodables
				if tMapTo["SCTUS-ICD10CM" {
					Set tCode=tAssocObject.toConcept.code
					Set tDTSId=tAssocObject.toConcept.id
					Set tNameId=tAssocObject.toConcept.namespaceId
					Set tName=tAssocObject.toConcept.name
					Set tRevisionIn=tAssocObject.revisionIn
					Set tRevisionOut=tAssocObject.revisionOut
					Set tAssoc10Cnt=tAssoc10Cnt+1
					Set ^TMP("BSTSCMCL",$job,1,"A10",tAssoc10Cnt)=tCode_"^"_tNameId_"^"_tDTSId_"^"_tName_"^"_tRevisionIn_"^"_tRevisionOut
				}
				
				//Retrieve ICD-10 Conditionals
				if tMapTo["SCTUS-ICD10-CM" {
					Set tCode=tAssocObject.toConcept.code
					Set tDTSId=tAssocObject.toConcept.id
					Set tNameId=tAssocObject.toConcept.namespaceId
					Set tName=tAssocObject.toConcept.name
					Set tRevisionIn=tAssocObject.revisionIn
					Set tRevisionOut=tAssocObject.revisionOut
					
					Set QualifierCount=tAssocObject.qualifiers.Count()
					For tQualifierKey=1:1:tAssocObject.qualifiers.Count() {
						Set tQualifier=tAssocObject.qualifiers.GetAt(tQualifierKey)
						Set tQualifierValue=tQualifier.value
						Set tMapGroup=$p(tQualifierValue,"|")
						Set tMapPriority=$p(tQualifierValue,"|",2)
						Set tMapCondition=$p(tQualifierValue,"|",3)
						Set tMapFriendlyAdvice=$p(tQualifierValue,"|",4)
						
						If (tMapGroup>0)&&(tMapPriority]"") {
							Set tAssoc10PCnt=tAssoc10PCnt+1
							Set ^TMP("BSTSCMCL",$job,1,"A10C",tMapGroup,tMapPriority,tAssoc10PCnt)=tCode_"^"_tMapCondition_"^"_tNameId_"^"_tDTSId_"^"_tName_"^"_tRevisionIn_"^"_tRevisionOut
						
							//BSTS*2.0*1;Set up map advice
							Set ^TMP("BSTSCMCL",$job,1,"ICD10A",tAssoc10PCnt,"mapGroup")=tMapGroup_"^"_tRevisionIn_"^"_tRevisionOut
							Set ^TMP("BSTSCMCL",$job,1,"ICD10A",tAssoc10PCnt,"mapPriority")=tMapPriority_"^"_tRevisionIn_"^"_tRevisionOut
							Set ^TMP("BSTSCMCL",$job,1,"ICD10A",tAssoc10PCnt,"mapTarget")=tCode_"^"_tRevisionIn_"^"_tRevisionOut
							Set ^TMP("BSTSCMCL",$job,1,"ICD10A",tAssoc10PCnt,"mapAdvice")=tMapFriendlyAdvice_"^"_tRevisionIn_"^"_tRevisionOut

						}
					}
				}

				//Include ICD-9 Autocodables
				if tMapTo["SCTUS-ICD9CM" {
					Set tCode=tAssocObject.toConcept.code
					Set tDTSId=tAssocObject.toConcept.id
					Set tNameId=tAssocObject.toConcept.namespaceId
					Set tName=tAssocObject.toConcept.name
					Set tRevisionIn=tAssocObject.revisionIn
					Set tRevisionOut=tAssocObject.revisionOut
					
					//Filter out E-Codes and save entry
					If $E(tCode,1)'="E" {
						Set tAssoc9Cnt=tAssoc9Cnt+1
						Set ^TMP("BSTSCMCL",$job,1,"ICD9",tAssoc9Cnt)=tCode_"^"_tNameId_"^"_tDTSId_"^"_tName_"^"_tRevisionIn_"^"_tRevisionOut
					}
				}

			}			
			
			Set tEndTime=$now(),tElapsedTime=..GetElapsedTime(tStartTime,tEndTime),pResult="1^^"_tElapsedTime
		}
	}

	Set tStatus=pResult
	Quit tStatus
]]></Implementation>
</Method>

<Method name="findTermsByName">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
		
	// Data passed into pParams via the BSTSWS array
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=$Get(pParams("NAMESPACEID"))
	Set tSearchPattern=$Get(pParams("SEARCH"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tMaxResults=$Get(pParams("MAXRECS")) S tMaxResults=100
	
	//Get location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tConnectionTimeout=$Get(pParams("CTIME"))

	Set tStartTime=$now()
	Set tStatus=0
	Set pResult=1
				
	// Setup request for search options and attribute set descriptors for initial call
	Set tSearchOptions=##class(BSTS.ns1.TTermSearchOptions).%New()
	Set tAttributeSetDesc=##class(BSTS.ns1.TTermAttributeSetDescriptor).%New()
	
	Set tSearchOptions.snapshotDate=tSnapshotDate	
	Set tAttributeSetDesc.name="Asd7"
	Set tAttributeSetDesc.allPropertyTypes="1"
	Set tAttributeSetDesc.allSynonymTypes="1"
	Set tAttributeSetDesc.allTermAssociationTypes="1"
	Set tAttributeSetDesc.inverseTermAssociationTypes="1"
	Set tAttributeSetDesc.DEFAULTLIMIT=0
	Set tAttributeSetDesc.attributesLimit=10000

	Set tSearchOptions.firstResult="0"
	Set tSearchOptions.limit=100
	Set tSearchOptions.namespaceId=tNamespaceID
	Set tSearchOptions.status="A"
		
	Set tSearchOptions.firstResult="0"
	Set tSearchOptions.limit=tMaxResults
	Set tSearchOptions.namespaceId=tNamespaceID
	Set tSearchOptions.status="A"
		
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
				
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()

	try {
		Set tSC=tWebClient.findTermsWithNameMatching(tSearchPattern,tSearchOptions)
	
		If tDebug {
			W !!
			Do $SYSTEM.OBJ.Dump(tSC)
		}
	
		//Assemble return status
		Set tStatus="1^^"_..GetElapsedTime(tStartTime,$now())			
				
	}
	Catch Exception {
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		}
		else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}
	
	// Web call completed. Parse response...
	Set tCount=tSC.Count()
	
	Set tCounter=0
	For tKey=1:1:tCount {
		Set tObject=##class(BSTS.ns1.TTerm).%New()
		Set tObject=tSC.GetAt(tKey)
		If tDebug {
			Do $SYSTEM.OBJ.Dump(tObject)
		}
		Set code=tObject.code
		Set rin=tObject.revisionIn
		Set rout=tObject.revisionOut
		
		if tDebug {
			W !!,"Code: ",code,?20,"Add date: ",rin,?48,"Retire date: ",rout
		}
		If code]"" {
			Set tCounter=tCounter+1
			Set ^TMP("BSTSCMCL",$job,tCounter)=code_"^"_rin_"^"_rout
		}
			
	}
	
	//Assemble return status
	If tCounter>0 {
		Set tStatus="1^^"_..GetElapsedTime(tStartTime,$now())	
	}
	
	Quit tStatus
]]></Implementation>
</Method>

<Method name="FindTermsWithNameMatching">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	// Data needed passed by BSTSWS array required for call	

	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=$Get(pParams("NAMESPACEID"))
	Set tSearchPattern=$Get(pParams("SEARCH"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tMaxResults=$Get(pParams("MAXRECS")) S tMaxResults=100
	
	//Get location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tConnectionTimeout=$Get(pParams("CTIME"))

	Set tStatus=0
	Set pResult=1
		
	// Setup request for search options and attribute set descriptors for initial call
	Set tSearchOptions=##class(BSTS.ns1.TTermSearchOptions).%New()
	Set tAttributeSetDesc=##class(BSTS.ns1.TTermAttributeSetDescriptor).%New()
	
	//Set tSearchOptions.attributeSetDescriptor.name="ASD Test 5"
	Set tSearchOptions.snapshotDate=tSnapshotDate	
	Set tAttributeSetDesc.DEFAULTLIMIT=0
	Set tAttributeSetDesc.allPropertyTypes="false"
	Set tAttributeSetDesc.allSynonymTypes="1"
	Set tAttributeSetDesc.allTermAssociationTypes="false"
	Set tAttributeSetDesc.allInverseTermAssociationTypes="false"
	Set tAttributeSetDesc.attributesLimit="1000"
	
	Set tSearchOptions.attributeSetDescriptor=tAttributeSetDesc
	
	Set tSearchOptions.firstResult="0"
	Set tSearchOptions.limit=tMaxResults
	Set tSearchOptions.namespaceId=tNamespaceID
	Set tSearchOptions.status="A"
		
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.findTermsWithNameMatching(tSearchPattern,tSearchOptions)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","findTermsWithNameMatching","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","findTermsWithNameMatching","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","findTermsWithNameMatching","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","findTermsWithNameMatching","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","findTermsWithNameMatching","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","findTermsWithNameMatching","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
	If (tDebug) {
		Write !,$tr(tSearchPattern,"*")," results returned: ",tSC.Count()
	}

	// Web call completed. Parse response...
	Set tCount=tSC.Count()
	Set tCounter=0
	For tKey=1:1:tCount {
		Set tObject=##class(BSTS.ns1.TTerm).%New()
		Set tObject=tSC.GetAt(tKey)
		Set tsnap=tObject.snapshotDate
		Set tName=tObject.name
		Set tCode=tObject.code
		If tName="Acute nasal catarrh" {
			Do $SYSTEM.OBJ.Dump(tObject)

		}

		Set tSynonymList=##class(%ListOfObjects).%New()
		Set tSynonymList=tObject.synonyms
		Set synct=tSynonymList.Count()
		Set tSynonym=##class(BSTS.ns1.TSynonym).%New()
		
		Set tSYNCount=0
		For tSynonymKey=1:1:tSynonymList.Count() {
			Set tSynonym=tSynonymList.GetAt(tSynonymKey)
			Set tConcept=##class(BSTS.ns1.TOntylogConcept).%New()
			Set tConcept=tSynonym.concept
			Set tConc=tConcept.code
			Set tId=tConcept.id
		}
	}
	
	//End Here - instead of parsing
	Quit 1_"^^"_..GetElapsedTime(tStartTime,$now())
]]></Implementation>
</Method>

<Method name="FindConceptsWithNameMatching">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	// Data needed passed by BSTSWS array required for call

	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=$Get(pParams("NAMESPACEID"))
	Set tSearchPattern=$Get(pParams("SEARCH"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tMaxResults=$Get(pParams("MAXRECS")) S tMaxResults=100

	//Get location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"
	Set tConnectionTimeout=$Get(pParams("CTIME"))

	Set tStatus=0
	Set pResult=1
	// Setup request for search options and attribute set descriptors for initial call
	
	Set tSearchOptions=##class(BSTS.ns1.TConceptSearchOptions).%New()
	Set tAttributeSetDesc=##class(BSTS.ns1.TConceptAttributeSetDescriptor).%New()

	Set tSearchOptions.snapshotDate=tSnapshotDate	
	Set tAttributeSetDesc.DEFAULTLIMIT=0
	Set tAttributeSetDesc.allPropertyTypes="false"
	Set tAttributeSetDesc.allConceptAssociationTypes="false"
	Set tAttributeSetDesc.allSynonymTypes="false"
	Set tAttributeSetDesc.allInverseRoleTypes="false"
	Set tAttributeSetDesc.allRoleTypes="false"
	Set tAttributeSetDesc.attributesLimit="1000"
	Set tAttributeSetDesc.definedViewAttributes="false"
	Set tAttributeSetDesc.queryHasSubs="0"
	Set tAttributeSetDesc.queryHasSups="0"
	Set tAttributeSetDesc.subconcepts="0"
	Set tAttributeSetDesc.superconcepts="false"
	Set tSearchOptions.attributeSetDescriptor=tAttributeSetDesc
	
	Set tSearchOptions.firstResult="0"
	Set tSearchOptions.limit=tMaxResults
	Set tSearchOptions.namespaceId=tNamespaceID
	Set tSearchOptions.status="A"
		
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.findConceptsWithNameMatching(tSearchPattern,tSearchOptions)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","findConceptsWithNameMatching","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","findConceptsWithNameMatching","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","findConceptsWithNameMatching","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","findConceptsWithNameMatching","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","findConceptsWithNameMatching","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","findConceptsWithNameMatching","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
	If (tDebug) {
		Write !,$tr(tSearchPattern,"*")," results returned: ",tSC.Count()
	}

	// Web call completed. Parse response...
	Set tCount=tSC.Count()
	
	Set tCounter=0
	For tKey=1:1:tCount {
		Set tObject=##class(BSTS.ns1.TOntylogConcept).%New()
		Set tObject=tSC.GetAt(tKey)
		Set tConceptID=tObject.id
		Set tRIn=tObject.revisionIn
		Set tROut=tObject.revisionOut
		If tConceptID>0 {
			Set tCounter=tCounter+1
			Set ^TMP("BSTSCMCL",$job,tConceptID)=($p($g(^TMP("BSTSCMCL",$job,tConceptID)),"^")+1)_"^"_tRIn_"^"_tROut
		}

		If (tDebug) {
			Write !,$tr(tSearchPattern,"*"),?30,tCounter,?40,tConceptID
		}
	}
	
	//End Here - instead of parsing
	Quit 1_"^^"_..GetElapsedTime(tStartTime,$now())
]]></Implementation>
</Method>

<Method name="findConceptsWithPropMatch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// Data passed into pParams via the BSTSWS array
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=$Get(pParams("NAMESPACEID"))
	Set tSearchPattern=$Get(pParams("SEARCH"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tMaxResults=$Get(pParams("MAXRECS")) S tMaxResults=100

	//Get location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tConnectionTimeout=$Get(pParams("CTIME"))

	Set tStartTime=$now()
	Set tStatus=0
	Set pResult=1
					
	// Setup request for search options and attribute set descriptors for initial call
	Set tSearchOptions=##class(BSTS.ns1.TConceptSearchOptions).%New()
	Set tAttributeSetDesc=##class(BSTS.ns1.TConceptAttributeSetDescriptor).%New()
	Set tPropType1=##class(BSTS.ns1.TPropertyType).%New()

	Set tPropType1.namespaceId=tNamespaceID
	Set tPropType1.name="Code in Source"
	Set tPropType1.attachesTo="C"
	
	Set tSearchOptions.ALLCONTENT="0"
	Set tSearchOptions.DEFAULTLIMIT="0"
	
	Set tAttributeSetDesc.DEFAULTLIMIT="0"
	Set tAttributeSetDesc.name="ASD Test"
	Set tAttributeSetDesc.attributesLimit="100"
	Set tAttributeSetDesc.allPropertyTypes="false"
	Set tAttributeSetDesc.allAssociationTypes="false"
	Set tAttributeSetDesc.allInverseAssociationTypes="false"
	Set tAttributeSetDesc.allSynonymTypes="false"
	Set tAttributeSetDesc.allRoleTypes="false"
	Set tAttributeSetDesc.allInverseRoleTypes="false"
	Set tAttributeSetDesc.definedViewAttributes="false"
	Set tAttributeSetDesc.queryHasSubs="false"
	Set tAttributeSetDesc.queryHasSups="false"
	Set tAttributeSetDesc.subconcepts="false"
	Set tAttributeSetDesc.superconcepts="false"
	Set tAttributeSetDesc.snapshotDate=tSnapshotDate
		
	Set tSearchOptions.snapshotDate=tSnapshotDate
	Set tSearchOptions.firstResult="0"
	Set tSearchOptions.limit=tMaxResults
	Set tSearchOptions.subsetSearch="false"
	Set tSearchOptions.contentId=tNamespaceID
	Set tSearchOptions.status=""

	//SNOMED
	if tNamespaceID=36 {
		Set tPropType1.id="12"
	}
	//UNII
	if tNamespaceID=5180 {
		set tPropType1.id="1"
	}
	//RXNORM
	if tNamespaceID=1552 {
		set tPropType1.id="10"
	}
	//ECLID
	if tNamespaceID=32770 {
		set tPropType1.id="1"
	}
	//CPT to RxNorm
	if tNamespaceID=32775 {
		set tPropType1.id="2"
	}
	//32773
	if tNamespaceID=32773 {
		set tPropType1.id="1"
	}
	//32771
	if tNamespaceID=32771 {
		set tPropType1.id="1"
	}
	//32772
	if tNamespaceID=32772 {
		set tPropType1.id="1"
	}
	//32774
	if tNamespaceID=32774 {
		set tPropType1.id="1"
	}
	//32775
	if tNamespaceID=32775 {
		set tPropType1.id="1"
	}

	Do tAttributeSetDesc.propertyTypes.Insert(tPropType1)
			
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	If tDebug {
		W !!
		Do $SYSTEM.OBJ.Dump(tAttributeSetDesc)
		Do $SYSTEM.OBJ.Dump(tPropType1)
		Do $SYSTEM.OBJ.Dump(tSearchOptions)
		Do $SYSTEM.OBJ.Dump(tWebClient)
		W !!,"Search Pattern: ",tSearchPattern
	}
							
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	try {
		Set tSC=tWebClient.findConceptsWithPropertyMatching(tPropType1,tSearchPattern,tSearchOptions)
	
		If tDebug {
			W !!
			Do $SYSTEM.OBJ.Dump(tSC)
		}
		//Assemble return status
		Set tStatus="1^^"_..GetElapsedTime(tStartTime,$now())	
		
	}
	Catch Exception {
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		}
		else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}
	
	// Web call completed. Parse response...
	Set tCount=tSC.Count()
	
	Set tCounter=0
	For tKey=1:1:tCount {
		Set tObject=##class(BSTS.ns1.TOntylogConcept).%New()
		Set tObject=tSC.GetAt(tKey)
		Set tDTSId=tObject.id
		If tDTSId>0 {
			Set tCounter=tCounter+1
			Set ^TMP("BSTSCMCL",$job,tDTSId)=$g(^TMP("BSTSCMCL",$job,tDTSId))+1
		}

		If (tDebug) {
			Write !,$tr(tSearchPattern,"*"),?30,tCounter,?40,tDTSId
		}
	}
	
	//Assemble return status
	If tCounter>0 {
		Set tStatus="1^^"_..GetElapsedTime(tStartTime,$now())	
	}
	
	Quit tStatus
]]></Implementation>
</Method>

<Method name="findDescWithIdMatch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
		
	// Data passed into pParams via the BSTSWS array
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=$Get(pParams("NAMESPACEID"))
	Set tSearchPattern=$Get(pParams("SEARCH"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tMaxResults=$Get(pParams("MAXRECS")) S tMaxResults=100

	//Get location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tConnectionTimeout=$Get(pParams("CTIME"))

	Set tStartTime=$now()
	Set tStatus=0
	Set pResult=1	
	
	/*
	//BEE;BSTS*1.0*2;Switching to stored procedure call because DTS v4.2 has a bug
	//               in the call that we were using
	Set tAttributeSetDesc=##class(BSTS.ns1.TTermAttributeSetDescriptor).%New()
	
	Set tAttributeSetDesc.DEFAULTLIMIT="0"
	Set tAttributeSetDesc.name="asd"
	Set tAttributeSetDesc.snapshotDate=tSnapshotDate
	Set tAttributeSetDesc.allPropertyTypes="false"
	Set tAttributeSetDesc.allSynonymTypes="1"
	Set tAttributeSetDesc.allAssociationTypes="false"
	Set tAttributeSetDesc.allInverseAssociationTypes="false"
	Set tAttributeSetDesc.attributesLimit=100
	
	If tDebug {
		Do $System.OBJ.Dump(tAttributeSetDesc)
	}
	
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(BSTS.ns1.TTerm).%New()
	
	try {
		Set tSC=tWebClient.findTermByCode(tSearchPattern, tNamespaceID, tAttributeSetDesc)
	
		If tDebug {
			W !!
			Do $SYSTEM.OBJ.Dump(tSC)
		}		
	}
	Catch Exception {
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		}
		else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}
	
	If $IsObject(tSC) {
		Set sCount=tSC.synonyms.Count()
	
		If sCount>0 {
	
			Set tSynonym=##class(BSTS.ns1.TSynonym).%New()
			Set tSynonym=tSC.synonyms.GetAt(1)

			If tDebug>0 {
				Do $SYSTEM.OBJ.Dump(tSynonym)
			}
		
			//Get concept info
			Set tConcept=##class(BSTS.ns1.TOntylogConcept).%New()
			Set tConcept=tSynonym.concept
		
			If tDebug>0 {
				Do $SYSTEM.OBJ.Dump(tConcept)
			}
		
			Set tId=tConcept.id
		
			If tId>0 {
				Set ^TMP("BSTSCMCL",$job,1)=tId
				Set tStatus="1^^"_..GetElapsedTime(tStartTime,$now())	

			}
		}
	}
	//End of old lookup logic
	*/	
	
	//Set up code for Description Id store procedure call
	Set SQLSearch="DECLARE @RC int DECLARE @Namespace varchar(10) = '"
	Set SQLSearch=SQLSearch_tNamespaceID_"'"
	Set SQLSearch=SQLSearch_" DECLARE @DescID varchar(20) = '"
	Set SQLSearch=SQLSearch_tSearchPattern_"' EXEC"
	Set SQLSearch=SQLSearch_" @RC = [dbo].[dts_getDTSIdfromDescId]"
	Set SQLSearch=SQLSearch_" @Namespace, @DescID"
    
	If $Get(tDebug) {
		Write !!,"SQL Call: ",SQLSearch,!
	}
		
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
    	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
	
	// Setup response
	Set tSC=##class(%ListOfObjects).%New()
	
	try {
		
		Set tSC=tWebClient.executeSQL(SQLSearch)
		If (tDebug) {
			Do $System.OBJ.Dump(tWebClient)
			If $ISOBJECT(tWebClient.HttpResponse) {
				Set tHTTPResponse=##class(%Net.HttpResponse).%New()
				Set tHTTPResponse=tWebClient.HttpResponse
				Set pResult("DEBUG","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
				Set pResult("DEBUG","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
				Set pResult("DEBUG","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
			}
			Set tHttpHeadersOut=##class(%ArrayOfObjects).%New()
			Set tHttpHeadersOut=tWebClient.HeadersOut
			For key=1:1:tHttpHeadersOut.Count() {
			}
					
		}

		//Assemble return status
		Set tStatus="1^^"_..GetElapsedTime(tStartTime,$now())	
		
	}
	Catch Exception
	{
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","executeSQL","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","executeSQL","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","executeSQL","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		} else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		If $ISOBJECT(tWebClient.HttpResponse) {
			Set tHTTPResponse=##class(%Net.HttpResponse).%New()
			Set tHTTPResponse=tWebClient.HttpResponse
			Set pResult("ERROR","executeSQL","HTTP_RESPONSE_DATA")=tHTTPResponse.Data
			Set pResult("ERROR","executeSQL","HTTP_REASON_PHRASE")=tHTTPResponse.ReasonPhrase
			Set pResult("ERROR","executeSQL","HTTP_HEADERS_DATE")=$Get(tHTTPResponse.Headers("DATE"))
		}
		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}

	// If the result of the web call was an error - Quit now. 
	If ($Piece(pResult,"^",1)=0) Quit tStatus
	
	//Display results returned
	If $Get(tDebug) {
		Write !,tSearchPattern," results returned: ",tSC.Count()
	}

	// Web call completed. Parse response...
	Set tCount=tSC.Count()
		
	Set tCounter=0
	For tKey=1:1:tCount {
		
		Set tResult=##class(BSTS.ns2.stringArray).%New()
		Set tResult=tSC.GetAt(tKey)
		Set DTSId=tResult.item.GetAt(1)

		If $Get(tDebug) {
			W !!,"#: ",tKey
			W !,"DTSId: ",DTSId
		}
		
		//Save entry
		If DTSId>0 {
			Set ^TMP("BSTSCMCL",$job,1)=DTSId
			Set tStatus="1^^"_..GetElapsedTime(tStartTime,$now())
		}
	
	}
	
	Quit tStatus
]]></Implementation>
</Method>

<Method name="getSubsetList">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
		
	// Data passed into pParams via the BSTSWS array
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=300   //Override default
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=$Get(pParams("NAMESPACEID"))
	Set tSearchPattern=$Get(pParams("SUBSET"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tMaxResults=$Get(pParams("MAXRECS")) S tMaxResults=300000
	Set tReturnLimit=300000

	//Get location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tConnectionTimeout=$Get(pParams("CTIME"))

	Set tStartTime=$now()
	Set tStatus=0
	Set pResult=1
				
	Set tCounter=0
	Set Continue=1
	
	While Continue=1 {	

		// Setup request for search options and attribute set descriptors for initial call
		Set tSearchOptions=""
		Set tSearchOptions=##class(BSTS.ns1.TConceptSearchOptions).%New()
		Set tAttributeSetDesc=""
		Set tAttributeSetDesc=##class(BSTS.ns1.TConceptAttributeSetDescriptor).%New()
		Set tPropType1=""		
		Set tPropType1=##class(BSTS.ns1.TPropertyType).%New()
		
		Set tPropType1.name="IHS"
		If tNamespaceID=36 {
			Set tPropType1.namespaceId=32768
		}
		If tNamespaceID=1552 {
			Set tPropType1.namespaceId=32769
		}
			
		//Set tPropType1.code="N32768"
		Set tPropType1.id="1"
	
		Set tSearchOptions.ALLCONTENT="0"
		Set tSearchOptions.DEFAULTLIMIT="0"
	
		Set tAttributeSetDesc.DEFAULTLIMIT="0"
		Set tAttributeSetDesc.name="ASD Test"
		Set tAttributeSetDesc.attributesLimit="100"
		Set tAttributeSetDesc.allPropertyTypes="false"
		Set tAttributeSetDesc.allAssociationTypes="false"
		Set tAttributeSetDesc.allInverseAssociationTypes="false"
		Set tAttributeSetDesc.allSynonymTypes="false"
		Set tAttributeSetDesc.allRoleTypes="false"
		Set tAttributeSetDesc.allInverseRoleTypes="false"
		Set tAttributeSetDesc.definedViewAttributes="false"
		Set tAttributeSetDesc.queryHasSubs="false"
		Set tAttributeSetDesc.queryHasSups="false"
		Set tAttributeSetDesc.subconcepts="false"
		Set tAttributeSetDesc.superconcepts="false"
			
		Set tSearchOptions.snapshotDate=tSnapshotDate
		Set tSearchOptions.firstResult="0"
		Set tSearchOptions.limit=tMaxResults
		Set tSearchOptions.subsetSearch="false"
		Set tSearchOptions.contentId=tNamespaceID
		Set tSearchOptions.status="A"
		
		Do tAttributeSetDesc.propertyTypes.Insert(tPropType1)
	
		// Initialize new web client to make the SOAP call
		Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
		Set tWebClient.Location=tLocation
		Set tWebClient.HttpUsername=tUserName
		Set tWebClient.HttpPassword=tPassword
		Set tWebClient.Timeout=tWebServiceTimeout
		Set tWebClient.OpenTimeout=tConnectionTimeout

		If ((tLocation["https://")&(tSSLConfiguration]"")) {	
			Set tWebClient.SSLConfiguration=tSSLConfiguration
    		Set tWebClient.HttpProxySSLConnect=0
		}
		Set tStartTime=$now()
					
		// Setup response
		If $Get(tDebug) {
			W !!,"treturnlimit: ",tReturnLimit
			W !,"tfirstresult: ",tCounter
			W !,"sub: ",tSearchPattern
		}
	
		Set tSC="",tSC=##class(%ListOfObjects).%New()
		try {
			Set tSC=tWebClient.findConceptsWithPropertyMatching(tPropType1,tSearchPattern,tSearchOptions)
		
			If tDebug {
				W !!
				Do $SYSTEM.OBJ.Dump(tSC)
			}
	
			//Assemble return status
			Set tStatus="1^^"_..GetElapsedTime(tStartTime,$now())	
		
		}
		Catch Exception {
			
			Set tError=""
			Set tErrorText=""
			If ($ZERROR["<ZSOAP>") {
				Set pResult("ERROR","SOAPFAULT","CODE")=tWebClient.SoapFault.faultcode
				Set pResult("ERROR","SOAPFAULT","FAULTSTRING")=tWebClient.SoapFault.faultstring
				Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
				Set pResult("ERROR","SOAPFAULT","ERRORSTRING")=$Get(tError(1))
				Set tErrorText=$Get(tError(1))
			}
			else {
				Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
				Set pResult("ERROR","ERRORSTRING")=tErrorText
			}

			Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
			Set tStatus=pResult
		}
	
		// Web call completed. Parse response...
		Set tCount=tSC.Count()
		
		If $Get(tDebug) {
			W !,"tCount: ",tCount
		}
	
		For tKey=1:1:tCount {
			Set tObject=##class(BSTS.ns1.TOntylogConcept).%New()
			Set tObject=tSC.GetAt(tKey)
			Set tDTSId=tObject.id
			
			If tDTSId>0 {
								
				Set tCounter=tCounter+1
				Set ^TMP("BSTSCMCL",$job,tCounter)=tDTSId
			}

			If (tDebug) {
				Write !,$tr(tSearchPattern,"*"),?30,tCounter,?40,tDTSId
			}
		}

		//Loop end
		If tReturnLimit>tCount {
			Set Continue=0
		}
	}

	//Assemble return status
	If tCounter>0 {
		Set tStatus="1^^"_..GetElapsedTime(tStartTime,$now())	
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="getICD9toSNOMED">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
		
	// Data passed into pParams via the BSTSWS array
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=$Get(pParams("NAMESPACEID"))
	Set tSearchPattern=$Get(pParams("SEARCH"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tMaxResults=$Get(pParams("MAXRECS")) S:tMaxResults="" tMaxResults=10000
	Set tReturnLimit=10000

	//Get location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tConnectionTimeout=$Get(pParams("CTIME"))

	Set tStartTime=$now()
	Set tStatus=0
	Set pResult=1
				
	Set tCounter=0

	// Setup request for search options and attribute set descriptors for initial call
	Set tSearchOptions=""
	Set tSearchOptions=##class(BSTS.ns1.TConceptSearchOptions).%New()
	Set tAttributeSetDesc=""
	Set tAttributeSetDesc=##class(BSTS.ns1.TConceptAttributeSetDescriptor).%New()
	
	Set tPropType1=""
	Set tPropType1=##class(BSTS.ns1.TPropertyType).%New()
		
	Set tPropType1=##class(BSTS.ns1.TPropertyType).%New()
	Set tPropType1.namespaceId=36
	Set tPropType1.id="6"
	Set tPropType1.name="SNOMED_ICD9_MAP"
	Set tPropType1.attachesTo="C"
	Set tSearchOptions.DEFAULTLIMIT="0"
	Set tSearchOptions.ALLCONTENT="0"
		
	Set tAttributeSetDesc.DEFAULTLIMIT=0
	Set tAttributeSetDesc.name="ASD Test"
	Set tAttributeSetDesc.allAssociationTypes="false"
	Set tAttributeSetDesc.allInverseAssociationTypes="false"
	Set tAttributeSetDesc.allPropertyTypes="false"
	Set tAttributeSetDesc.allSynonymTypes="false"
	Set tAttributeSetDesc.allRoleTypes="false"
	Set tAttributeSetDesc.attributesLimit="100"
	Set tAttributeSetDesc.definedViewAttributes="false"
	Set tAttributeSetDesc.queryHasSubs="false"
	Set tAttributeSetDesc.queryHasSups="false"
	Set tAttributeSetDesc.subconcepts="false"
	Set tAttributeSetDesc.superconcepts="false"
	Set tAttributeSetDesc.allInverseRoleTypes="false"
	
	Set tSearchOptions.snapshotDate=tSnapshotDate
	Set tSearchOptions.firstResult=0
	Set tSearchOptions.limit=tReturnLimit
	Set tSearchOptions.subsetSearch="false"
	Set tSearchOptions.contentId=tNamespaceID
	Set tSearchOptions.status="A"
		
	Do tAttributeSetDesc.propertyTypes.Insert(tPropType1)
	
	// Initialize new web client to make the SOAP call
	Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
	Set tWebClient.Location=tLocation
	Set tWebClient.HttpUsername=tUserName
	Set tWebClient.HttpPassword=tPassword
	Set tWebClient.Timeout=tWebServiceTimeout
	Set tWebClient.OpenTimeout=tConnectionTimeout

	If ((tLocation["https://")&(tSSLConfiguration]"")) {	
		Set tWebClient.SSLConfiguration=tSSLConfiguration
	 	Set tWebClient.HttpProxySSLConnect=0
	}
	Set tStartTime=$now()
					
	// Setup response
	If $Get(tDebug) {
		W !!,"treturnlimit: ",tReturnLimit
		W !,"tfirstresult: ",tCounter
	}
	Set tSC="",tSC=##class(%ListOfObjects).%New()
	try {
		Set tSC=tWebClient.findConceptsWithPropertyMatching(tPropType1,tSearchPattern,tSearchOptions)
	
		If tDebug {
			W !!
			Do $SYSTEM.OBJ.Dump(tSC)
		}

		//Assemble return status
		Set tStatus="1^^"_..GetElapsedTime(tStartTime,$now())	
		
	}
	Catch Exception {
			
		Set tError=""
		Set tErrorText=""
		If ($ZERROR["<ZSOAP>") {
			Set pResult("ERROR","SOAPFAULT","CODE")=tWebClient.SoapFault.faultcode
			Set pResult("ERROR","SOAPFAULT","FAULTSTRING")=tWebClient.SoapFault.faultstring
			Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
			Set pResult("ERROR","SOAPFAULT","ERRORSTRING")=$Get(tError(1))
			Set tErrorText=$Get(tError(1))
		}
		else {
			Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
			Set pResult("ERROR","ERRORSTRING")=tErrorText
		}

		Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
		Set tStatus=pResult
	}
	
	// Web call completed. Parse response...
	Set tCount=tSC.Count()
		
	If $Get(tDebug) {
		W !,"tCount: ",tCount
	}
	
	For tKey=1:1:tCount {
		Set tObject=##class(BSTS.ns1.TOntylogConcept).%New()
		Set tObject=tSC.GetAt(tKey)
		Set tDTSId=tObject.id
			
		If tDTSId>0 {
								
			Set tCounter=tCounter+1
			Set ^TMP("BSTSCMCL",$job,tCounter)=tDTSId
		}

		If (tDebug) {
			Write !,$tr(tSearchPattern,"*"),?30,tCounter,?40,tDTSId
		}
	}

	//Assemble return status
	If tCounter>0 {
		Set tStatus="1^^"_..GetElapsedTime(tStartTime,$now())	
	}
	
	Quit tStatus
]]></Implementation>
</Method>

<Method name="propertyLookup">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams:%String="",&pResult:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	// Data passed into pParams via the BSTSWS array
	Set tDebug=$Get(pParams("DEBUG"))
	Set tWebServiceTimeout=$Get(pParams("TIMEOUT"))
	Set tSearchPattern=$Get(pParams("SEARCH"))
	Set tUserName=$Get(pParams("USER"))
	Set tPassword=$Get(pParams("PASS"))
	Set tSSLConfiguration=$Get(pParams("SSL"))
	Set tNamespaceID=$Get(pParams("NAMESPACEID"))
	Set tSnapshotDate=$Get(pParams("SNAPDT"))
	Set tMaxResults=$Get(pParams("MAXRECS"))
	Set tConnectionTimeout=$Get(pParams("CTIME"))

	If tMaxResults="" {
		Set tMaxResults=100
	}
	
	Set tReturnLimit=10000
	Set tPropVal=$Get(pParams("PROPERTY"))
	
	//Get location
	//BEE;BSTS*1.0*2;Changed location logic
	//Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoService/DtsQueryDaoWS"
	Set tLocation=$Get(pParams("URLROOT"))_":"_$Get(pParams("PORT"))_$Get(pParams("SERVICEPATH"))_"/DtsQueryDaoWS"

	Set tStartTime=$now()
	Set tStatus=1
	Set pResult=1
	
	//Set up property name
	Set tPropNam=""
	If tPropVal=110 {
		Set tPropNam="NDC"
	}
	If tPropVal=209 {
		Set tPropNam="VUID"
	}
				
	Set tCounter=0
	Set Continue=1
	
	While Continue=1 {	

		// Setup request for search options and attribute set descriptors for initial call
		Set tSearchOptions=""
		Set tSearchOptions=##class(BSTS.ns1.TConceptSearchOptions).%New()
		Set tAttributeSetDesc=""
		Set tAttributeSetDesc=##class(BSTS.ns1.TConceptAttributeSetDescriptor).%New()
		Set tPropType1=""		
		Set tPropType1=##class(BSTS.ns1.TPropertyType).%New()
		
		Set tPropType1.namespaceId=tNamespaceID
		Set tPropType1.name=tPropNam
		Set tPropType1.id=tPropVal
		Set tPropType1.attachesTo="C"

			
		Set tSearchOptions.ALLCONTENT="0"
		Set tSearchOptions.DEFAULTLIMIT="0"
	
		Set tAttributeSetDesc.DEFAULTLIMIT="0"
		Set tAttributeSetDesc.name="ASD 1"
		Set tAttributeSetDesc.attributesLimit="100"
		Set tAttributeSetDesc.allPropertyTypes="false"
		Set tAttributeSetDesc.allAssociationTypes="false"
		Set tAttributeSetDesc.allInverseAssociationTypes="false"
		Set tAttributeSetDesc.allSynonymTypes="false"
		Set tAttributeSetDesc.allRoleTypes="false"
		Set tAttributeSetDesc.allInverseRoleTypes="false"
		Set tAttributeSetDesc.definedViewAttributes="false"
		Set tAttributeSetDesc.queryHasSubs="false"
		Set tAttributeSetDesc.queryHasSups="false"
		Set tAttributeSetDesc.subconcepts="false"
		Set tAttributeSetDesc.superconcepts="false"			
		Set tSearchOptions.snapshotDate=tSnapshotDate
		Set tSearchOptions.firstResult="0"
		Set tSearchOptions.limit=tMaxResults
		Set tSearchOptions.subsetSearch="false"
		Set tSearchOptions.contentId=tNamespaceID
		Set tSearchOptions.status=""
		
		Do tAttributeSetDesc.propertyTypes.Insert(tPropType1)
	
		// Initialize new web client to make the SOAP call
		Set tWebClient=##class(BSTS.DtsQueryDaoPort).%New()
		Set tWebClient.Location=tLocation
		Set tWebClient.HttpUsername=tUserName
		Set tWebClient.HttpPassword=tPassword
		Set tWebClient.Timeout=tWebServiceTimeout
		Set tWebClient.OpenTimeout=tConnectionTimeout

		If ((tLocation["https://")&(tSSLConfiguration]"")) {	
			Set tWebClient.SSLConfiguration=tSSLConfiguration
   		 	Set tWebClient.HttpProxySSLConnect=0
		}
		Set tStartTime=$now()
					
		// Setup response
		If $Get(tDebug) {
			W !!,"treturnlimit: ",tReturnLimit
			W !,"tfirstresult: ",tCounter
			W !,"sub: ",tSearchPattern
		}
	
		Set tSC="",tSC=##class(%ListOfObjects).%New()
		try {
			Set tSC=tWebClient.findConceptsWithPropertyMatching(tPropType1,tSearchPattern,tSearchOptions)
		
			If tDebug {
				W !!
				Do $SYSTEM.OBJ.Dump(tSC)
			}		
		}
		Catch Exception {
			
			Set tError=""
			Set tErrorText=""
			If ($ZERROR["<ZSOAP>") {
				Set pResult("ERROR","SOAPFAULT","CODE")=tWebClient.SoapFault.faultcode
				Set pResult("ERROR","SOAPFAULT","FAULTSTRING")=tWebClient.SoapFault.faultstring
				Set tError=$System.Status.DecomposeStatus(%objlasterror,.tError)
				Set pResult("ERROR","SOAPFAULT","ERRORSTRING")=$Get(tError(1))
				Set tErrorText=$Get(tError(1))
			}
			else {
				Set tErrorText=$$$ERROR($$$CacheError,$ZERROR)
				Set pResult("ERROR","ERRORSTRING")=tErrorText
			}

			Set pResult="0^"_tErrorText_$get(pResult("ERROR","HTTP_REASON_PHRASE"))_"^"_..GetElapsedTime(tStartTime,$now())	
			Set tStatus=pResult
		}
	
		// Web call completed. Parse response...
		Set tCount=tSC.Count()
		
		If $Get(tDebug) {
			W !,"tCount: ",tCount
		}
	
		For tKey=1:1:tCount {
			Set tObject=##class(BSTS.ns1.TOntylogConcept).%New()
			Set tObject=tSC.GetAt(tKey)
			Set tDTSId=tObject.id
			
			If tDTSId>0 {
								
				Set tCounter=tCounter+1
				Set ^TMP("BSTSCMCL",$job,tDTSId)=$g(^TMP("BSTSCMCL",$job,tDTSId))+1

			}

			If (tDebug) {
				Write !,$tr(tSearchPattern,"*"),?30,tCounter,?40,tDTSId
			}
		}

		//Loop end
		If tReturnLimit>tCount {
			Set Continue=0
		}
	}
	//Assemble return status
	If tStatus=1 {
		Set tStatus="1^^"_..GetElapsedTime(tStartTime,$now())	
	}
	
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetElapsedTime">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStartDate:%String="",pEndDate:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Quit:pStartDate="" ""
	Set pEndDate=$select(pEndDate="":$now(),1:pEndDate)	// Default $now() if no pEndDate passed
	Quit $Piece(pEndDate,",")-$Piece(pStartDate,",")*86000+$Piece(pEndDate,",",2)-$Piece(pStartDate,",",2)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^BSTS.SOAP.WebFunctionsD</DataLocation>
<DefaultData>WebFunctionsDefaultData</DefaultData>
<IdLocation>^BSTS.SOAP.WebFunctionsD</IdLocation>
<IndexLocation>^BSTS.SOAP.WebFunctionsI</IndexLocation>
<StreamLocation>^BSTS.SOAP.WebFunctionsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="WebFunctionsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
