Instructions to Import FOIA-RPMS from a CACHE.DAT

Download FOIA-RPMS
-------------------
Download releases from the OSEHRA Tech Journal from here: https://code.osehra.org/journal/journal/view/?revisionId=320 and ff.


Configure InterSystems Caché
----------------------------

Configure a RPMS namespace in InterSystems Caché and point it at the
above "CACHE.DAT".  Map globals TEMP, TMP, UTILITY, and XTMP into the
CACHETEMP namespace.  Also map globals %Z* and %z* and routines

  %DT*, %XB*, %XU*, %ZG*, %ZI*, %ZO*, %ZT*, %ZU*, %ZV*,
  %RCR, %ZDEBUG, %HOSTCMD, %INET, %Serenj*

into the RPMS namespace.

Instance Set-up
---------------
For Telnet Device, change to be appropriate.
Change default HFS directory to be appropriate.
Double check printing the latest installs from Fileman to check that the RPMS instance is really the date it says it was last updated.

Recompile all Objects and Reindex Routines
------------------------------------------
  D ^%RCOMPIL
  N $NAMESPACE S $NAMESPACE="%SYS" W $System.OBJ.UpgradeAll()
  Q
  D RebuildIndex^%R("","",1)
  Do $System.OBJ.Compile("*","ckr")

Extract Routines and Globals
----------------------------

Start the Caché Terminal.  Dump all RPMS routines using %RO:

 RPMS>D ^%RO
 Routine output (please use %ROMF for object code output)
 Routine(s): *
 Routine(s): <ENTER>
 Description: RPMS Routines
 Output routines to
 Device: /tmp/RPMS/Routines.ro

Currently there is a routine/class called AGMPI which crashes the %RO. I let Floyd know. For now, you need to exclude it by putting 'AGMPI.* after *.

Pack the "ZGO" routine into routine transfer format:

 $ python Scripts/PackRO.py Scripts/ZGO.m > /tmp/ZGO.ro

Start the Caché Terminal.  Load the ZGO routine:

 RPMS>D ^%RI
 Input routines from Sequential
 Device: /tmp/ZGO.ro
 Parameters? "R" =>
 Override and use this File with %RI? No => Yes

Dump all RPMS globals using the ZGO routine. We do this using single threading as there are bad globals that cause crashes. It would be wise therefore to run this and see if it crashes in front of you.

 RPMS>S ZGODEBUG=1 D SAVEALL^ZGO("/tmp/RPMS/Globals/")
 
My records show that the following non-Fileman globals crash:
^XCR
^XCSV
^XCSVICD9

To extract Classes, run this:
 
  RPMS>Do $system.OBJ.ExportAllClassesIndividual("/tmp/RPMS/classes","diffexport")

This fails right now due to AGMPI (again!). To fix, do this:

  RPMS>S ^oddDEF("AGMPI.Adapters.HLOGlobalInbound","m","OnTask",30,146)=" "

RPMS has now been extracted to the host disk as

 $ ls /tmp/RPMS/Routines.ro /tmp/RPMS/Globals/*.zwr /tmp/RPMS/Classes/*.xml


Unpack Routines and Globals
---------------------------
Clean globals:
$ rm -v [A-Za-Z]*.*.zwr
removed ‘DICT.COMO.zwr’
removed ‘DICT.PH.zwr’
removed ‘DICT.SAVEDLISTS.zwr’
removed ‘DICT.VOC.zwr’
removed ‘MV.SYS.zwr’
removed ‘MV.VOC.zwr’


Remove old FOIA-RPMS files but not Packages/.gitattributes:

 $ rm -rf -- Packages/*

Unpack routines from the routine transfer format to .m files:

 $ cd Packages
 $ python ../Scripts/UnpackRO.py < /tmp/VistA/Routines.ro
 $ cd ..

Remove Caché-specific routines. These are classes which are handled later.

 $ rm Packages/*.*.m

Copy (or move) the global .zwr files:

 $ cp /tmp/RPMS/Globals/*.zwr Packages/

To prevent a crash in the next step, add a +0 to the file DD.zwr, since DD
is file zero.

 $ mv Packages/DD{,\+0}.zwr

Split large global .zwr files into pieces no larger than 64 MiB:

 $ ls Packages/*.zwr | python Scripts/SplitZWR.py --size 64 --stdin

Copy the classes into the packages directory

 $ cp /tmp/RPMS/Classes/*.zwr Packages/

Populate Package Directories
----------------------------

Run the PopulatePackages python script to process Packages.csv and
populate the Packages directory structure:

 $ cd Packages
 $ python ../Scripts/PopulatePackages.py < ../Packages.csv

Check for new Uncategorized routines and globals:

 $ git status -- Uncategorized

Any untracked files this reports are new.  Iteratively update
Packages.csv to account for new packages, namespaces, and FileMan
files and test it by re-processing the Uncategorized files:

 $ edit ../Packages.csv
 $ mv Uncategorized/Routines/*.m .
 $ mv Uncategorized/Globals/*.zwr .
 $ python ../Scripts/PopulatePackages.py < ../Packages.csv
 $ git status -- Uncategorized

Once the content of Uncategorized is satisfactory, the package
directories have been populated.

 $ cd ..


Commit Changes
--------------

If any changes were made above to Packages.csv commit it first:

 $ git add -- Packages.csv
 $ git commit

Now commit the Packages directory.

 $ git add --all -- Packages
 $ git commit

Write descriptive commit messages!
